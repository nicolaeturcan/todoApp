{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","factory","$filter","_iF","_lenF","_keysF","_filter","_state","for_all_descendants","options","fieldChild","fnBefore","fnAfter","parentPassed","isFunction","_i","_len","_nodes","_nodePassed","_childPassed","length","_fnCheck","callback","check","isArray","_regex","RegExp","test","err","indexOf","_fnProccess","condition","isAnd","for_each_filter","_iO","_keysO","_lenO","_key","field","_callback","Object","keys","conditions","i","len","passed","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","showParent","showChild","_fnBefore","filter","beginAnd","_fnConvert","filters","isObject","push","_fnMain","treeData","_fnOrderBy","name","fnOrderBy","_fnOrder","list","orderBy","isString","$timeout","$TreeDnDHelper","_offset","_fnPlaceHolder","e","$params","placeElm","offset","top","pageY","height","left","pageX","width","_fnDragStart","hasTouch","button","which","uiTreeDragging","originalEvent","eventElm","element","target","eventScope","scope","$type","dragScope","eventElmTagName","prop","toLowerCase","_$scope","$scope","nodrag","parent","preventDefault","getScopeNode","firstMoving","$callbacks","beforeDrag","eventObj","tagName","$element","isTable","dragInfo","setDragging","pos","positionStarted","dragElm","$window","document","createElement","addClass","$class","$tree_class","css","z-index","offsetEdge","_width","_scope","_element","_clone","_needCollapse","enabledCollapse","_copied","_tbody","__level__","_node","getScope","clone","replaceIndent","append","enabledMove","_holder","getElementChilds","_swaper","after","find","remove","replaceWith","offsetX","calsIndent","offsetY","$document","droppable","initPlace","showPlace","targeting","enabledStatus","refreshStatus","setPositionStatus","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","Math","max","body","scrollHeight","offsetHeight","html","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","_fnDragMove","dragStarted","dragDelaying","$safeApply","dragStart","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","pageYOffset","documentElement","scrollTop","bottom_scroll","innerHeight","scrollBy","positionMoved","targetElm","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","_parent","fnSwapTree","targetX","scrollLeft","targetY","isChanged","isVeritcal","_info","_move","move","_drag","_drop","drop","treeScope","isHolder","elementFromPoint","getScopeTree","hidePlace","tree_nodes","dirAx","horizontal","_height","getData","getNode","__parent_real__","_prev","getPrevSibling","__index__","__expanded__","__children__","__index_real__","distAxX","dragBorder","distX","__visible__","accept","changed","parentNode","insertBefore","getLastDescendant","prepend","dragMove","_fnDragEnd","_passed","_isTable","beforeDrop","removeClass","hideStatus","_status","$$apply","dropped","_fnBindDrag","dragStop","unbind","_fnDragStartEvent","draggable","dragTimer","dragDelay","cancel","_fnKeydownHandler","keyCode","enabledHotkey","shiftKey","enableMove","_fnKeyupHandler","_$init","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","statusElm","fnSetCollapse","fnSetExpand","n","selected_node","select_node","__selected__","expand_all_parents","on_select","deselect_node","get_parent","for_all_ancestors","child","fn","reload_data","add_node","new_node","index","splice","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","extend","directive","$compile","restrict","link","attrs","$watch","compile","new_val","compileReplace","$parse","$http","$templateCache","controller","$attrs","$node_class","_enabledDragDrop","dragEnabled","dropEnabled","keyNode","treeDndNode","setScope","querySelector","replace","$nodes_class","$injector","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDPlugin","indent","indent_plus","indent_unit","primary_key","colDefinitions","$globals","copy","iconExpand","iconCollapse","iconLeaf","last_child","onClick","on_click","setTimeout","onSelect","passedExpand","toggleExpand","fnCallback","expand","getHash","__parent__","__uid__","moveTo","level","skipUnit","skipEdge","unit","edge","event","changeKey","random","_this","this","add","enableDrag","enableDrop","statusMove","dragging","scopeDrag","skiped","info","pass","isMove","_nodeAdd","_parentRemove","_parentAdd","enableStatus","statusElmOld","getMove","getCopy","attr","_index","_hash","_len_down","phase","$root","$$phase","$apply","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","expandingProperty","getColDefs","_col_defs","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","expandLevel","__icon__","__icon_class__","__hashKey__","__dept__","oData","_data","_tree_nodes","expandOn","columnDefs","filterOptions","_max","_min","_deptTotal","abs","_defaultFilterOption","check_exist_attr","existAttr","for_each_attrs","exist","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","trim","$tree","colDefs","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","tElement","$_Template","_fnInitDrag","ready","templateUrl","getPath","cache","success","data","_$initConvert","line2tree","parentKey","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","_copy","_child","_tree","_$helper","obj","undefined","targetTouches","boundingClientRect","getBoundingClientRect","pageXOffset","startX","lastX","startY","lastY","nowX","nowY","distY","dirX","dirY","lastDirX","lastDirY","distAxY","newAx","moving","children","_fnget","has","temp","templatePath","copyPath","movePath","scopes","path","$id","run","put","join","call"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BA,WACI,YACAA,SAAQC,kBAAoB,SAAUC,GAClC,MAAOF,SAAQG,YAAYD,IAAgB,OAARA,GAGvCF,QAAQI,UAAY,SAAUF,GAC1B,QAASF,QAAQG,YAAYD,IAAgB,OAARA,IAGzCF,QAAQK,OAAO,eAAgB,kCAAkCC,SAC7D,iBACIC,KAAQ,WACRC,MAAQ,iBACRC,OAAQ,kBACRC,KAAQ,gBACRC,MAAQ,iBACRC,OAAQ,kBACRC,MAAQ,uBACRC,KAAQ,gBACRC,OAAQ,kBACRC,MACIC,EAAM,4BACNC,EAAM,2BACNC,KAAM,8BAGhBC,QACF,kBACI,UAAW,SAAUC,GACjB,GAAIC,GAAKC,EAAOC,EACZC,EACAC,EACAC,EAAsB,QAASA,GAAoBC,EAASlB,EAAMmB,EAAYC,EAAUC,EAASC,GAC7F,IAAKhC,QAAQiC,WAAWH,GACpB,MAAO,KAGX,IAAII,GAAIC,EAAMC,EACVC,EAAcP,EAASF,EAASlB,GAChC4B,GAAe,CAEnB,IAAItC,QAAQI,UAAUM,EAAKmB,IAGvB,IAFAO,EAAS1B,EAAKmB,GACdM,EAAOC,EAAOG,OACTL,EAAK,EAAQC,EAALD,EAAWA,IACpBI,EAAeX,EACXC,EACAQ,EAAOF,GACPL,EACAC,EACAC,EACAM,GAAeL,IACdM,CAQb,OAJItC,SAAQiC,WAAWF,IACnBA,EAAQH,EAASlB,EAAM2B,KAAgB,EAAMC,KAAiB,EAAMN,KAAiB,GAGlFK,GAAeC,GAG1BE,EAAW,SAAkBC,EAAUC,GACnC,GAAI1C,QAAQC,kBAAkByC,IAAU1C,QAAQ2C,QAAQD,GACpD,MAAO,KAGX,IAAI1C,QAAQiC,WAAWQ,GACnB,MAAOA,GAASC,EAAOrB,EAEvB,IAAwB,iBAAboB,GAEP,MADAC,KAAUA,EACHA,IAAUD,CACd,KAAIzC,QAAQI,UAAUqC,GAazB,MAAO,KAZP,KACI,GAAIG,GAAS,GAAIC,QAAOJ,EACxB,OAAOG,GAAOE,KAAKJ,GAEvB,MAAOK,GACH,MAAqB,gBAAVL,GACAA,EAAMM,QAAQP,GAAY,GAE1B,OAkB3BQ,EAAc,SAAqBvC,EAAMwC,EAAWC,GAChD,GAAInD,QAAQ2C,QAAQO,GAChB,MAAOE,GAAgB1C,EAAMwC,EAAWC,EAExC,IAEIE,GAAKC,EAAQC,EAFbC,EAAON,EAAUO,MACjBC,EAAYR,EAAUT,QAG1B,IAAa,OAATe,GAGA,IAFAF,EAASK,OAAOC,KAAKlD,GACrB6C,EAAQD,EAAOf,OACVc,EAAM,EAASE,EAANF,EAAaA,IACvB,GAAIb,EAASkB,EAAWhD,EAAK4C,EAAOD,KAChC,OAAO,MAGZ,IAAIrD,QAAQI,UAAUM,EAAK8C,IAC9B,MAAOhB,GAASkB,EAAWhD,EAAK8C,KAW5CJ,EAAkB,SAAyB1C,EAAMmD,EAAYV,GACzD,GAAIW,GAAGC,EAAMF,EAAWtB,QAAU,EAAGyB,GAAS,CAC9C,IAAY,IAARD,EACA,MAAO,KAGX,KAAKD,EAAI,EAAOC,EAAJD,EAASA,IACjB,GAAIb,EAAYvC,EAAMmD,EAAWC,IAAKX,IAGlC,GAFAa,GAAS,GAEJb,EACD,OAAO,MAKX,IAAIA,EACA,OAAO,CAKnB,OAAOa,IAaXC,EAAW,SAAkBrC,EAASlB,EAAMwD,EAAcC,EAAeC,GACrE,MAAIF,MAAiB,GACjBxD,EAAK2D,cAAe,OACpB3D,EAAK4D,sBAAuB,IAEpBH,KAAkB,GAAQvC,EAAQ2C,cAAe,GAC9CH,KAAmB,GAAQxC,EAAQ4C,aAAc,GAC5D9D,EAAK2D,cAAe,OACpB3D,EAAK4D,sBAAuB,WAKzB5D,GAAiB,wBACjBA,GAAyB,uBAYpC+D,EAAY,SAAmB7C,EAASlB,GACpC,MAA8B,KAA1BkB,EAAQ8C,OAAOnC,QACR,EAEAU,EAAYvC,EAAMkB,EAAQ8C,OAAQ9C,EAAQ+C,WAAY,IAWrEC,EAAa,QAASA,GAAWC,GAE7B,GAAI7E,QAAQ8E,SAASD,KAAa7E,QAAQ2C,QAAQkC,GAAU,CAKxD,GAJArD,EAASmC,OAAOC,KAAKiB,GACrBtD,EAAQC,EAAOe,OACfd,KAEIF,EAAQ,EACR,IAAKD,EAAM,EAASC,EAAND,EAAaA,KAEe,gBAA1BuD,GAAQrD,EAAOF,KAAuD,IAAhCuD,EAAQrD,EAAOF,IAAMiB,UAGnEb,EADO1B,QAAQ2C,QAAQkC,EAAQrD,EAAOF,KAC7BuD,EAAQrD,EAAOF,IACjBtB,QAAQ8E,SAASD,EAAQrD,EAAOF,KAC9BsD,EAAWC,EAAQrD,EAAOF,MAG/BmC,MAAUjC,EAAOF,GACjBmB,SAAUoC,EAAQrD,EAAOF,KAGjCG,EAAQsD,KAAKrD,GAIrB,OADAA,GAAS,KACFD,EAGP,MAAOoD,IAafG,EAAU,SAAiBC,EAAUJ,EAASjD,GAC1C,IAAK5B,QAAQ2C,QAAQsC,IACM,IAApBA,EAAS1C,SACPvC,QAAQ2C,QAAQkC,KAAY7E,QAAQ8E,SAASD,IAC5B,IAAnBA,EAAQtC,OACX,MAAO0C,EAGX,IAAI/C,GAAIC,EACJV,CAGJ,IADAA,EAAUmD,EAAWC,IACf7E,QAAQ2C,QAAQlB,KAAYzB,QAAQ8E,SAASrD,IACzB,IAAnBA,EAAQc,OACX,MAAO0C,EAGX,KADArD,EAAQ8C,OAASjD,EACZS,EAAK,EAAGC,EAAO8C,EAAS1C,OAAaJ,EAALD,EAAWA,IAC5CP,EACIC,EACAqD,EAAS/C,GACT,eACAuC,EAAWR,EAInB,OAAOgB,GAGf,OAAOD,MAEjB5D,QACE,mBACI,UAAW,SAAUC,GACjB,GAAI6D,GAAa7D,EAAQ,WACrBM,EAAsB,QAASA,GAAoBC,EAASlB,EAAMyE,EAAMC,GACpE,GAAIlD,GAAIC,EAAMC,CAEd,IAAIpC,QAAQI,UAAUM,EAAKyE,IAAQ,CAI/B,IAHA/C,EAAS1B,EAAKyE,GACdhD,EAAOC,EAAOG,OAETL,EAAK,EAAQC,EAALD,EAAWA,IACpBE,EAAOF,GAAMP,EAAoBC,EAASQ,EAAOF,GAAKiD,EAAMC,EAGhE1E,GAAKyE,GAAQC,EAAU1E,EAAKyE,GAAOvD,GAEvC,MAAOlB,IAEX2E,EAAW,SAAkBC,EAAMC,GAC/B,MAAOL,GAAWI,EAAMC,IAE5BP,EAAU,SAAiBC,EAAUM,GACjC,IAAKvF,QAAQ2C,QAAQsC,IACM,IAApBA,EAAS1C,UACPvC,QAAQ2C,QAAQ4C,IAAYvF,QAAQ8E,SAASS,IAAYvF,QAAQwF,SAASD,IAAYvF,QAAQiC,WAAWsD,KACvF,IAAnBA,EAAQhD,SAAiBvC,QAAQiC,WAAWsD,GAChD,MAAON,EAGX,IAAI/C,GAAIC,CAGR,KAAKD,EAAK,EAAGC,EAAO8C,EAAS1C,OAAaJ,EAALD,EAAWA,IAC5C+C,EAAS/C,GAAMP,EACX4D,EACAN,EAAS/C,GACT,eACAmD,EAKR,OADAJ,GAAWI,EAASJ,EAAUM,GAItC,OAAOP,MAEjB5D,QACE,gBACI,WAAY,iBACZ,SAAUqE,EAAUC,GAChB,GAAIC,GACAC,EAAiB,SAAUC,EAAGC,GAC1B,MAAIA,GAAQC,WACRJ,EAAUD,EAAeM,OAAOF,EAAQC,UACpCJ,EAAQM,KAAOJ,EAAEK,OAASL,EAAEK,OAASP,EAAQM,IAAMN,EAAQQ,QAC3DR,EAAQS,MAAQP,EAAEQ,OAASR,EAAEQ,OAASV,EAAQS,KAAOT,EAAQW,QAEtD,GAGR,GAEXC,EAAe,SAAUV,EAAGC,GACxB,IAAKA,EAAQU,UAA0B,IAAbX,EAAEY,QAA4B,IAAZZ,EAAEa,UAI1Cb,EAAEc,gBAAmBd,EAAEe,eAAiBf,EAAEe,cAAcD,gBAA5D,CAIA,GAAIE,GAAW7G,QAAQ8G,QAAQjB,EAAEkB,QAC7BC,EAAaH,EAASI,OAC1B,IAAKD,GAAeA,EAAWE,OAON,sBAArBF,EAAWE,MAAf,CAIA,GACIC,GADAC,EAAkBP,EAASQ,KAAK,WAAWC,cAE3CC,EAAUzB,EAAQ0B,MACtB,IAAwB,UAApBJ,GACuB,aAApBA,GACoB,WAApBA,GACoB,WAApBA,EAHP,CAOA,KAAOP,GAAYA,EAAS,IAAMA,EAAS,KAAOf,EAAQgB,SAAS,CAC/D,GAAIpB,EAAe+B,OAAOZ,GACtB,MAEJA,GAAWA,EAASa,SAaxB,GAVA7B,EAAEc,gBAAiB,EACfd,EAAEe,gBACFf,EAAEe,cAAcD,gBAAiB,GAErCd,EAAE8B,iBAEFR,EAAYH,EAAWY,eAEvB9B,EAAQ+B,aAAc,EAEjBN,EAAQO,WAAWC,WAAWZ,GAAnC,CAIA,GAAIa,GAAWtC,EAAesC,SAASnC,GACnCoC,EAAUd,EAAUe,SAASb,KAAK,WAAWC,cAC7Ca,EAAuB,OAAZF,CAEfnC,GAAQsC,SAAW1C,EAAe0C,SAASjB,GAE3CI,EAAQc,YAAYvC,EAAQsC,UAE5BtC,EAAQwC,IAAM5C,EAAe6C,gBAAgBP,EAAUb,EAAUe,UAG7DpC,EAAQ0C,QADRL,EACkBnI,QAAQ8G,QAAQhB,EAAQ2C,QAAQC,SAASC,cAAc,UACpEC,SAASrB,EAAQsB,OAAOtI,MACxBqI,SAASrB,EAAQsB,OAAO/H,MACxB8H,SAASrB,EAAQuB,aAEJ9I,QAAQ8G,QAAQhB,EAAQ2C,QAAQC,SAASC,cAAc,OACpEC,SAASrB,EAAQsB,OAAO/H,MACxB8H,SAAS,kBACTA,SAASrB,EAAQuB,aAG1BhD,EAAQ0C,QAAQO,KAERzC,MAAWZ,EAAeY,MAAMa,EAAUe,UAAY,KACtDc,UAAW,OAInBlD,EAAQmD,WAAa,CACrB,IAAIC,GAASxD,EAAeY,MAAMa,EAAUe,UACxCiB,EAAShC,EACTiC,EAAWD,EAAOjB,SAClBmB,EAAS,KACTC,IAAkB/B,EAAQgC,gBAC1BC,GAAU,EACVC,EAAS,IAEb,IAAItB,EACArC,EAAQmD,WAAanD,EAAQsC,SAAS1H,KAAKgJ,UAAY,EACvDD,EAASzJ,QAAQ8G,QAAQhB,EAAQ2C,QAAQC,SAASC,cAAc,UAEhEpB,EAAQ5F,oBACJmE,EAAQsC,SAAS1H,KAAM,SAAUiJ,GAC7BR,EAAS5B,EAAQqC,SAASD,GAC1BP,EAAWD,EAAOjB,SAEbsB,IACDH,EAASD,EAASS,QAElBnE,EAAeoE,cACXvC,EACA8B,EACAM,EAAMD,UAAY5D,EAAQmD,WAC1B,gBAGJQ,EAAOM,OAAOV,GAGVC,IACAE,GAAU,IAIdjC,EAAQyC,aAAezC,EAAQsB,OAAOpI,QACtC2I,EAASR,SAASrB,EAAQsB,OAAOpI,UAK7CqF,EAAQ0C,QAAQuB,OAAON,OACpB,CAEH,GAAKH,EAEE,CACH,GAAIW,GAAUd,EAAOe,mBACjBC,EAAUnK,QAAQ8G,QAAQ,aAG9BmD,GAAQG,MAAMpK,QAAQ8G,QAAQ,eAC9BqD,EAAQJ,OAAOE,GAGfZ,EAASD,EAASS,QAClBR,EAAOgB,KAAK,UAAUC,SAGtBlB,EAASiB,KAAK,UAAUE,YAAYN,GAGpCE,EAAQG,SACRL,EAAU,SAlBVZ,GAASD,EAASS,OAqBtB/D,GAAQ0C,QAAQuB,OAAOV,GACnB9B,EAAQyC,aAAezC,EAAQsB,OAAOpI,QACtC2I,EAASR,SAASrB,EAAQsB,OAAOpI,QAIzCqF,EAAQ0C,QAAQO,KAER3C,KAAQ4B,EAAS3B,MAAQP,EAAQwC,IAAIkC,QAAUjD,EAAQO,WAAW2C,WAC9D3E,EAAQmD,WAAa,GACrB,GACA,GACM,KACVhD,IAAQ+B,EAAS9B,MAAQJ,EAAQwC,IAAIoC,QAAU,OAIvD5E,EAAQ6E,UAAUN,KAAK,QAAQN,OAAOjE,EAAQ0C,SAC1CjB,EAAQO,WAAW8C,cACnB9E,EAAQC,SAAWwB,EAAQsD,UAAU1D,EAAUe,SAAUpC,EAAQ0C,SAE7DL,GACAzC,EAAeoE,cAAcvC,EAASzB,EAAQC,SAAUD,EAAQsC,SAAS1H,KAAKgJ,WAGlF5D,EAAQC,SAASgD,IAAI,QAASG,IAGlC3B,EAAQuD,YACRvD,EAAQwD,WAAY,EAEhBxD,EAAQyD,gBACRzD,EAAQ0D,gBACR1D,EAAQ2D,kBAAkBrF,IAG9B7F,QAAQ8G,QAAQhB,EAAQ6E,WAAWQ,KAAK,WAAYrF,EAAQsF,cAC5DpL,QAAQ8G,QAAQhB,EAAQ6E,WAAWQ,KAAK,cAAerF,EAAQsF,cAC/DpL,QAAQ8G,QAAQhB,EAAQ6E,WAAWQ,KAAK,YAAarF,EAAQuF,eAC7DrL,QAAQ8G,QAAQhB,EAAQ6E,WAAWQ,KAAK,UAAWrF,EAAQsF,cAC3DpL,QAAQ8G,QAAQhB,EAAQ6E,WAAWQ,KAAK,YAAarF,EAAQuF,eAC7DrL,QAAQ8G,QAAQhB,EAAQ6E,WAAWQ,KAAK,aAAcrF,EAAQwF,iBAE9DxF,EAAQyF,gBAAkBC,KAAKC,IAC3B3F,EAAQ4F,KAAKC,aACb7F,EAAQ4F,KAAKE,aACb9F,EAAQ+F,KAAKC,aACbhG,EAAQ+F,KAAKF,aACb7F,EAAQ+F,KAAKD,cAGjB9F,EAAQiG,eAAiBP,KAAKC,IAC1B3F,EAAQ4F,KAAKM,YACblG,EAAQ4F,KAAKO,YACbnG,EAAQ+F,KAAKK,YACbpG,EAAQ+F,KAAKG,YACblG,EAAQ+F,KAAKI,kBAGrBE,EAAc,SAAUtG,EAAGC,GACvB,GAAIyB,GAAUzB,EAAQ0B,MACtB,KAAK1B,EAAQsG,YAST,YARKtG,EAAQuG,eACTvG,EAAQsG,aAAc,EACtB7E,EAAQ+E,WACJ,WACI/E,EAAQO,WAAWyE,UAAUzG,EAAQsC,aAOrD,IAAItC,EAAQ0C,QAAS,CACjB3C,EAAE8B,iBACE7B,EAAQ2C,QAAQ+D,aAChB1G,EAAQ2C,QAAQ+D,eAAeC,kBACxB3G,EAAQ2C,QAAQC,SAASgE,WAChC5G,EAAQ2C,QAAQC,SAASgE,UAAUlM,OAGvC,IAAIwH,GAAWtC,EAAesC,SAASnC,GACnC8G,EAAa3E,EAAS3B,MAAQP,EAAQwC,IAAIkC,QAC1CoC,EAAY5E,EAAS9B,MAAQJ,EAAQwC,IAAIoC,OAG5B,GAAbiC,IACAA,EAAa,GAID,EAAZC,IACAA,EAAY,GAIXA,EAAY,GAAM9G,EAAQyF,kBAC3BqB,EAAY9G,EAAQyF,gBAAkB,IAIrCoB,EAAa,GAAM7G,EAAQiG,iBAC5BY,EAAa7G,EAAQiG,eAAiB,IAG1CjG,EAAQ0C,QAAQO,KAER3C,KAAQuG,EAAapF,EAAQO,WAAW2C,WACpC3E,EAAQmD,WAAa,GACrB,GACA,GACM,KACVhD,IAAQ2G,EAAY,OAIxBrF,EAAQyD,eACRzD,EAAQ2D,kBAAkBrF,EAG9B,IAAIgH,GAAaC,OAAOC,aAAejH,EAAQ2C,QAAQC,SAASsE,gBAAgBC,UAC5EC,EAAgBL,GAAcC,OAAOK,aAAerH,EAAQ2C,QAAQC,SAASoD,cAAgBhG,EAAQ2C,QAAQC,SAASoD,aAY1H,IAVIoB,EAAgBlF,EAAS9B,OAASgH,GAAiBpH,EAAQyF,iBAC3DuB,OAAOM,SAAS,EAAG,IAGnBP,EAAa7E,EAAS9B,OACtB4G,OAAOM,SAAS,EAAG,KAGvB1H,EAAe2H,cAAcxH,EAAGC,EAAQwC,IAAKxC,EAAQ+B,aAEjD/B,EAAQ+B,YAER,YADA/B,EAAQ+B,aAAc,EAK1B,IAGIyF,GACAC,EACAC,EACAC,EACAxF,EACAE,EAGAuF,EACAC,EACAxE,EACAyE,EACAC,EAMAC,EArBAC,EAAU/F,EAAS3B,MAAQP,EAAQ2C,QAAQC,SAASgD,KAAKsC,WACzDC,EAAUjG,EAAS9B,OAAS4G,OAAOC,aAAejH,EAAQ2C,QAAQC,SAASsE,gBAAgBC,WAQ3FiB,GAAY,EACZC,GAAa,EAMbC,EAAQtI,EAAQsC,SAChBiG,EAAQD,EAAME,KACdC,EAAQH,EAAM1N,KACd8N,EAAQJ,EAAMK,KACdC,EAAYN,EAAMrH,OAElB4H,EAAW/I,EAAeC,EAAGC,EAEjC,KAAK6I,EAAU,CAaX,GARArB,EAAYtN,QAAQ8G,QAChBhB,EAAQ2C,QAAQC,SAASkG,iBACrBb,EACAE,IAIRV,EAAcD,EAAUrG,SACnBsG,IAAgBA,EAAYzF,aAAeyF,EAAYzF,WAAW8C,YAEnE,MAsBJ,IAnBAkD,EAAa,WAgBT,MAfAY,GAAYnB,EAAYsB,eACxBjB,EAAUQ,EAAMrH,OAEZqH,EAAMrH,SAAW2H,IAEjBd,EAAQkB,YACRlB,EAAQ7C,WAAY,EACpB2D,EAAU3D,WAAY,EAEtBqD,EAAMrH,OAAS2H,EACf5I,EAAQC,SAAW2I,EAAU7D,UAAU0C,EAAYrF,SAAUpC,EAAQ0C,SAErEoF,EAAU,KACVD,GAAY,IAET,GAGP3N,QAAQiC,WAAWsL,EAAY3F,eAE/B,GADA2F,EAAcA,EAAY3F,gBACrBkG,IACD,WAED,CACH,GAA0B,iBAAtBP,EAAYrG,OAAkD,YAAtBqG,EAAYrG,MAapD,MAZA,KAAIqG,EAAYwB,WASZ,MARA,IAAsC,IAAlCxB,EAAYwB,WAAWxM,OAAc,CACrC,IAAKuL,IACD,MAGJJ,IAAU,IAgB9B,IALI5H,EAAQwC,IAAI0G,QAAUrB,GAAagB,KACnCR,GAAa,EACbZ,EAAca,EAAMnH,QAGnBsG,EAAYrF,WAAaqF,EAC1B,MAKJ,IAFAtF,EAAUsF,EAAYrF,SAASb,KAAK,WAAWC,cAC/Ca,EAAuB,UAAZF,GAAmC,UAAZA,GAAmC,OAAZA,GAAgC,OAAZA,EACzEyF,EACAW,EAAM3G,OAAS,KACf2G,EAAM/F,IAAM,EAEZkG,EAAQ,SAGR,IAAIL,EAAY,CAKZ,GAJAb,EAAYC,EAAYrF,SAExBuF,EAAe/H,EAAeM,OAAOsH,GAEjCC,EAAY0B,aAAe9G,EAC3BqF,EAAexF,EAAS3B,MAASoH,EAAarH,KAAOV,EAAeY,MAAMgH,GAAa,MAEvF,IAAInF,EACAqF,EAAexF,EAAS9B,MAASuH,EAAaxH,IAAMP,EAAeS,OAAOmH,GAAa,MACpF,CACH,GAAI4B,GAAUxJ,EAAeS,OAAOmH,EAMpC,IAJIC,EAAYrD,qBACZgF,IAAYxJ,EAAeS,OAAOoH,EAAYrD,qBAG9ClC,EAAS9B,MAAQuH,EAAaxH,IAAMiJ,EACpC,MAGJ1B,GAAexF,EAAS9B,MAASuH,EAAaxH,IAAMiJ,EAAU,EAItE,IAAKlP,QAAQiC,WAAWsL,EAAY4B,SAChC,MAMJ,IAHAvB,EAAUL,EAAY4B,UACtBtB,EAAUN,EAAY6B,QAAQxB,EAAQyB,iBAElC7B,EAAc,CACd,GAAI8B,GAAQ/B,EAAYgC,eAAe3B,EAEvCS,GAAM3G,OAASmG,EACfQ,EAAM/F,IAAMtI,QAAQI,UAAUkP,GAASA,EAAME,UAAY,EAAI,EAE7DhB,EAAQc,OAEJ1B,EAAQ6B,cAAkD,IAAhC7B,EAAQ8B,aAAanN,QAAgBqL,EAAQ+B,iBAAmBpB,EAAMc,iBAMhGhB,EAAM3G,OAASmG,EACfQ,EAAM/F,IAAMsF,EAAQ4B,UAAY,EAEhChB,EAAQZ,IARRS,EAAM3G,OAASkG,EACfS,EAAM/F,IAAM,EAEZkG,EAAQ,UAQb,CAEH,KAAI1I,EAAQwC,IAAI0G,OAASlJ,EAAQwC,IAAIsH,SAAWlB,EAAUmB,YAwDtD,MArDA,IAFA/J,EAAQwC,IAAIsH,QAAU,EAElB9J,EAAQwC,IAAIwH,MAAQ,EAAG,CAEvB,GADAjC,EAAUW,GACLX,EAAS,CACV,KAAIQ,EAAM/F,IAAM,GAAK,GAGjB,MAFAuF,GAAUQ,EAAM3G,OAAOgI,aAAarB,EAAM/F,IAAM,GAUxD,GAJI8F,EAAMtN,OAASsN,EAAMrH,QAAU8G,IAAYU,GAAShH,EAAQyC,cAC5D6D,EAAUa,EAAUa,eAAe1B,KAGnCA,IAAWA,EAAQkC,YAanB,MAZA,IAAI5N,GAAO0L,EAAQ6B,aAAanN,MAEhC8L,GAAM3G,OAASmG,EACfQ,EAAM/F,IAAMnG,EAGRqM,EADArM,EAAO,EACC0L,EAAQ6B,aAAavN,EAAO,GAE5B,SAMb,CAAA,KAAI2D,EAAQwC,IAAIwH,MAAQ,GAoB3B,MAlBA,IADAlC,EAAUS,EAAM3G,QACZkG,KACiC,IAAhCA,EAAQ8B,aAAanN,QACrBqL,EAAQ8B,aAAanN,OAAS,EAAI8L,EAAM/F,KACvC8F,EAAMtN,OAASsN,EAAMrH,QACrB6G,EAAQ+B,iBAAmBpB,EAAMc,iBACjCzB,EAAQ8B,aAAanN,OAAS,IAAMgM,EAAMiB,WAAajI,EAAQyC,aAUjE,MARA6D,GAAUa,EAAUU,QAAQxB,EAAQyB,iBAEpChB,EAAM3G,OAASmG,EACfQ,EAAM/F,IAAMsF,EAAQ4B,UAAY,EAEhChB,EAAQZ,GAexBQ,EAAMtN,OAASsN,EAAMrH,QACrBsH,EAAM3G,QACN6G,EAAMc,kBAAoBhB,EAAM3G,OAAOiI,gBACvCpB,EAAMiB,YAAcnB,EAAM/F,MAE1B4F,GAAY,GAGZQ,EAAU5G,WAAWkI,OAAO5B,EAAOC,EAAOH,KAC1CE,EAAME,KAAOD,EACbD,EAAMK,KAAOD,EACbJ,EAAM6B,QAAU/B,EAChBE,EAAMnH,MAAQsG,EAEVpF,GACAzC,EAAeoE,cACX4E,EACA5I,EAAQC,SACR/F,QAAQC,kBAAkBoO,EAAM3G,QAAU,EAAI2G,EAAM3G,OAAOgC,UAAY,GAGvE8E,GACAX,GAAWQ,EAAM3G,OAAS2G,EAAM3G,OAAOgI,aAAe,OAAUtB,EAAMrH,OAAO9B,SAEzEuJ,EAAMgB,UAAY3B,EAAQtL,OAAS,GAEnCiM,EAAQX,EAAQW,EAAMgB,UAAY,GAClCrG,EAASiF,EAAMrH,OAAO6C,SAAS4E,GAC/BrF,EAAOjB,SAAS,GAAGgI,WAAWC,aAC1BrK,EAAQC,SAAS,GACjBoD,EAAOjB,SAAS,MAGpB0F,EAAUQ,EAAMrH,OAAOqJ,kBAAkB5B,GACzCrF,EAASiF,EAAMrH,OAAO6C,SAASgE,GAC/BzE,EAAOjB,SAASkC,MAAMtE,EAAQC,aAGlCoD,EAASiF,EAAMrH,OAAO6C,SAASyE,EAAM3G,QACjCyB,IACIkF,EAAM3G,OACNyB,EAAOjB,SAASkC,MAAMtE,EAAQC,UAG9BoD,EAAOe,mBAAmBmG,QAAQvK,EAAQC,cAKtDoD,EAASiF,EAAMrH,OAAO6C,SAAS4E,GAASH,EAAM3G,QAE1C8G,EACArF,EAAOjB,SAASkC,MAAMtE,EAAQC,UAE9BoD,EAAOe,mBAAmBmG,QAAQvK,EAAQC,WAIlD2I,EAAU5D,YAEVvD,EAAQ+E,WACJ,WACI/E,EAAQO,WAAWwI,SAASlC,QAOhDmC,EAAa,SAAU1K,EAAGC,GAEtB,GADAD,EAAE8B,iBACE7B,EAAQ0C,QAAS,CACjB,GAAIgI,IAAU,EACVjJ,EAAUzB,EAAQ0B,OAClB2B,EAAS5B,EAAQqC,SAAS9D,EAAQsC,SAAS1H,MAC3CuH,EAAUkB,EAAOjB,SAASb,KAAK,WAAWC,cAC1CmJ,EAAwB,OAAZxI,EACZmB,EAAWD,EAAOjB,QAEtBX,GAAQ+E,WACJ,WACIkE,EAAUjJ,EAAQO,WAAW4I,WAAW5K,EAAQsC,YAKpDqI,EACAlJ,EAAQ5F,oBACJmE,EAAQsC,SAAS1H,KAAM,SAAUiJ,GAC7BR,EAAS5B,EAAQqC,SAASD,GAC1BP,EAAWD,EAAOjB,SAEdX,EAAQsB,OAAOpI,QACf2I,EAASuH,YAAYpJ,EAAQsB,OAAOpI,UAK5C8G,EAAQsB,OAAOpI,QACf2I,EAASuH,YAAYpJ,EAAQsB,OAAOpI,QAI5CqF,EAAQ0C,QAAQ8B,SAChBxE,EAAQ0C,QAAU,KAEdjB,EAAQyD,eACRzD,EAAQqJ,YAGZ,IAAIC,IAAU,CACVtJ,GAAQuJ,QACRvJ,EAAQ+E,WACJ,WACIuE,EAAUtJ,EAAQO,WAAWiJ,QACzBjL,EAAQsC,SACRoI,EACAjJ,EAAQyC,eAKpBgH,EAAYlL,GAGhByB,EAAQ+E,WACJ,WACI/E,EAAQO,WAAWmJ,SAASnL,EAAQsC,SAAUyI,KAItD/K,EAAQsC,SAASrB,OAAO+H,YACxBhJ,EAAQsC,SAASrB,OAAOgE,WAAY,EAEpCjF,EAAQsC,SAAW,KACnBb,EAAQuJ,SAAU,EAClBvJ,EAAQc,YAAY,MAGxBrI,QAAQ8G,QAAQhB,EAAQ6E,WAAWuG,OAAO,WAAYpL,EAAQsF,cAC9DpL,QAAQ8G,QAAQhB,EAAQ6E,WAAWuG,OAAO,cAAepL,EAAQsF,cACjEpL,QAAQ8G,QAAQhB,EAAQ6E,WAAWuG,OAAO,YAAapL,EAAQuF,eAC/DrL,QAAQ8G,QAAQhB,EAAQ6E,WAAWuG,OAAO,UAAWpL,EAAQsF,cAC7DpL,QAAQ8G,QAAQhB,EAAQ6E,WAAWuG,OAAO,YAAapL,EAAQuF,eAC/DrL,QAAQ8G,QAAQhB,EAAQ2C,QAAQC,SAASgD,MAAMwF,OAAO,aAAcpL,EAAQwF,kBAEhF6F,EAAoB,SAAUtL,EAAGC,GACzBA,EAAQ0B,OAAOM,WAAWsJ,aAC1B7K,EAAaV,EAAGC,IAGxBkL,EAAc,SAAUlL,GACpBA,EAAQgB,QAAQqE,KACZ,uBAAwB,SAAUtF,GAC9BC,EAAQuG,cAAe,EACvBvG,EAAQsG,aAAc,EACtB+E,EAAkBtL,EAAGC,GACrBA,EAAQuL,UAAY5L,EAChB,WACIK,EAAQuG,cAAe,GACxBvG,EAAQ0B,OAAO8J,aAI9BxL,EAAQgB,QAAQqE,KACZ,+BAAgC,WAC5B1F,EAAS8L,OAAOzL,EAAQuL,cAIpCG,EAAoB,SAAU3L,EAAGC,GAC7B,GAAIyB,GAAUzB,EAAQ0B,MACtB,IAAkB,KAAd3B,EAAE4L,QACElK,EAAQyD,eACRzD,EAAQqJ,aAGZrJ,EAAQuJ,SAAU,EAClBP,EAAW1K,EAAGC,OAEd,IAAIyB,EAAQmK,eAAiB7L,EAAE8L,SAAU,CAMrC,GALApK,EAAQqK,YAAW,GACfrK,EAAQyD,eACRzD,EAAQ0D,iBAGPnF,EAAQsC,SACT,MAGJ,IAAIe,GAAS5B,EAAQqC,SAAS9D,EAAQsC,SAAS1H,MAC3CuH,EAAUkB,EAAOjB,SAASb,KAAK,WAAWC,cAC1C8B,EAAWD,EAAOjB,QAEN,QAAZD,EACAV,EAAQ5F,oBACJmE,EAAQsC,SAAS1H,KAAM,SAAUiJ,GAC7BR,EAAS5B,EAAQqC,SAASD,GAC1BP,EAAWD,EAAOjB,SAEdX,EAAQsB,OAAOpI,QACf2I,EAASR,SAASrB,EAAQsB,OAAOpI,UAKzC8G,EAAQsB,OAAOpI,QACf2I,EAASR,SAASrB,EAAQsB,OAAOpI,UAMrDoR,EAAkB,SAAUhM,EAAGC,GAC3B,GAAIyB,GAAUzB,EAAQ0B,MACtB,IAAID,EAAQmK,gBAAkB7L,EAAE8L,SAAU,CAOtC,GANApK,EAAQqK,YAAW,GAEfrK,EAAQyD,eACRzD,EAAQ0D,iBAGPnF,EAAQsC,SACT,MAGJ,IAAIe,GAAS5B,EAAQqC,SAAS9D,EAAQsC,SAAS1H,MAC3CuH,EAAUkB,EAAOjB,SAASb,KAAK,WAAWC,cAC1C8B,EAAWD,EAAOjB,QAEN,QAAZD,EACAV,EAAQ5F,oBACJmE,EAAQsC,SAAS1H,KAAM,SAAUiJ,GAE7BR,EAAS5B,EAAQqC,SAASD,GAC1BP,EAAWD,EAAOjB,SAEdX,EAAQsB,OAAOpI,QACf2I,EAASuH,YAAYpJ,EAAQsB,OAAOpI,UAK5C8G,EAAQsB,OAAOpI,QACf2I,EAASuH,YAAYpJ,EAAQsB,OAAOpI,UAMpDqR,EAAS,SAAU7K,EAAOH,EAAS2B,EAASkC,GACxC,GAAI7E,IACIU,SAAkB,gBAAkBsG,QACpCjF,YAAiB,KACjBO,SAAiB,KACjBE,IAAiB,KACjBvC,SAAiB,KACjByC,QAAiB,KACjB6D,cAAiB,EACjBD,aAAiB,EACjBiF,UAAiB,KACjB3F,KAAiBhD,SAASgD,KAC1BG,KAAiBnD,SAASsE,gBAC1BzB,gBAAiB,KACjBQ,eAAiB,KACjB9C,WAAiB,KACjBzB,OAAiBP,EACjBwB,QAAiBA,EACjBkC,UAAiBA,EACjB7D,QAAiBA,EACjBiL,SAAiB,WACbf,EAAYlL,IAEhBkM,QAAiB,SAAUnM,GACvB0K,EAAW1K,EAAGC,IAElBuF,cAAiB,SAAUxF,GACvBsG,EAAYtG,EAAGC,IAEnBsF,aAAiB,SAAUvF,GACvBoB,EAAM6J,SAAU,EAChBP,EAAW1K,EAAGC,IAElBwF,gBAAiB,SAAUzF,GACvB0K,EAAW1K,EAAGC,KAGtBmM,EAAiB,SAAUpM,GACvB,MAAO2L,GAAkB3L,EAAGC,IAEhCoM,EAAe,SAAUrM,GACrB,MAAOgM,GAAgBhM,EAAGC,GAGlCmB,GAAM+K,QAAU,SAAUnM,GACtBC,EAAQkM,QAAQnM,IAGpBC,EAAQiM,WAER/R,QAAQ8G,QAAQ2B,EAAQC,SAASgD,MAAMP,KAAK,UAAW8G,GACvDjS,QAAQ8G,QAAQ2B,EAAQC,SAASgD,MAAMP,KAAK,QAAS+G,GAErDjL,EAAMkL,IACF,WAAY,WACRnS,QAAQ8G,QAAQ2B,EAAQC,SAASgD,MAAMwF,OAAO,UAAWe,GACzDjS,QAAQ8G,QAAQ2B,EAAQC,SAASgD,MAAMwF,OAAO,QAASgB,GACnDjL,EAAMmL,WACNnL,EAAMmL,UAAU9H,SAGhBrD,EAAMlB,UACNkB,EAAMlB,SAASuE,WAMnC,OAAOwH,MAGjB1Q,QACE,kBAAmB,WACf,GAAIwM,GAASC,EACT/J,EAAGC,EACHsO,EAAgB,SAAuB3R,GACnCA,EAAK+O,cAAe,GAExB6C,EAAc,SAAqB5R,GAC/BA,EAAK+O,cAAe,GAGxBqC,EAAS,SAAgB7K,GACrB,GAAIsL,GAAGhS,GACHiS,cAAmC,KACnC7Q,oBAAmCsF,EAAMtF,oBACzC8Q,YAAmC,SAAU/R,GACzC,MAAKA,IAQDA,IAASH,EAAKiS,gBACVjS,EAAKiS,qBACEjS,GAAKiS,cAA0B,aAE1C9R,EAAKgS,cAAe,EACpBnS,EAAKiS,cAAgB9R,EACrBH,EAAKoS,mBAAmBjS,GACpBV,QAAQiC,WAAW1B,EAAKqS,YACxBrS,EAAKqS,UAAUlS,IAGhBA,IAlBCH,EAAKiS,qBACEjS,GAAKiS,cAA0B,aAE1CjS,EAAKiS,cAAgB,KACd,OAgBfK,cAAmC,WAO/B,MANAjF,GAAU,KACNrN,EAAKiS,sBACEjS,GAAKiS,cAA0B,aACtC5E,EAAUrN,EAAKiS,cACfjS,EAAKiS,cAAgB,MAElB5E,GAEXkF,WAAmC,SAAUpS,GACzC,MAAIA,IAAiC,OAAzBA,EAAK2O,gBACNpI,EAAM8H,WAAWrO,EAAK2O,iBAE1B,MAEX0D,kBAAmC,SAAUC,EAAOC,GAEhD,MADApF,GAAUtN,EAAKuS,WAAWE,GACtBnF,EACIoF,EAAGpF,IACI,EAGJtN,EAAKwS,kBAAkBlF,EAASoF,IAEpC,GAEXN,mBAAmC,SAAUK,GACzC,MAAOzS,GAAKwS,kBACRC,EAAOV,IAGfY,YAAmC,WAC/B,MAAOjM,GAAMiM,eAEjBC,SAAmC,SAAUzL,EAAQ0L,EAAUC,GAgB3D,MAfqB,gBAAVA,GACH3L,GACAA,EAAOgI,aAAa3K,KAAKqO,GACzB1L,EAAO+H,cAAe,GAEtBxI,EAAMhC,SAASF,KAAKqO,GAGpB1L,GACAA,EAAOgI,aAAa4D,OAAOD,EAAO,EAAGD,GACrC1L,EAAO+H,cAAe,GAEtBxI,EAAMhC,SAASqO,OAAOD,EAAO,EAAGD,GAGjCA,GAEXG,cAAmC,SAAUH,GAEzC,MADA7S,GAAK4S,SAAS,KAAMC,GACbA,GAEXI,WAAmC,WAE/B,IADAzP,EAAMkD,EAAMhC,SAAS1C,OAChBuB,EAAI,EAAOC,EAAJD,EAASA,IACjBvD,EAAKoB,oBACDsF,EAAMhC,SAASnB,GAAIwO,IAI/BmB,aAAmC,WAE/B,IADA1P,EAAMkD,EAAMhC,SAAS1C,OAChBuB,EAAI,EAAOC,EAAJD,EAASA,IACjBvD,EAAKoB,oBACDsF,EAAMhC,SAASnB,GAAIuO,IAI/BqB,YAAmC,SAAUhT,GACzCA,EAAOA,GAAQH,EAAKiS,cAChB9R,IAEImN,EADAnN,EAAK2O,gBACK9O,EAAKuS,WAAWpS,GAAMgP,aAEtBzI,EAAMhC,SAGpB4I,EAAQyF,OAAO5S,EAAK8O,UAAW,GAE3BjP,EAAKiS,gBAAkB9R,IACvBH,EAAKiS,cAAgB,QAIjCmB,YAAmC,SAAUjT,GAEzC,MADAA,GAAOA,GAAQH,EAAKiS,cAChB9R,GACAA,EAAK+O,cAAe,EACb/O,GAFX,QAKJkT,cAAmC,SAAUlT,GAEzC,MADAA,GAAOA,GAAQH,EAAKiS,cAChB9R,GACAA,EAAK+O,cAAe,EACb/O,GAFX,QAKJmT,kBAAmC,WAC/B,MAAOtT,GAAKiS,eAEhBsB,eAAmC,WAE/B,MADA/P,GAAMkD,EAAMhC,SAAS1C,OACjBwB,EAAM,EACCkD,EAAMhC,SAAS,GAEnB,MAEX8O,aAAmC,SAAUrT,GACzC,MAAOA,GAAKgP,cAEhBsE,aAAmC,SAAUtT,GAEzC,MADAA,GAAOA,GAAQH,EAAKiS,cAChB9R,GACAmN,EAAUtN,EAAKuS,WAAWpS,GAEtBkN,EADAC,EACUA,EAAQ6B,aAERzI,EAAMhC,UALxB,QAUJgP,iBAAmC,SAAUvT,GAEzC,MADAA,GAAOA,GAAQH,EAAKiS,cAChB9R,IACAkN,EAAUrN,EAAKyT,aAAatT,GAC5B6R,EAAI3E,EAAQrL,OACR7B,EAAK8O,UAAY+C,GACV3E,EAAQlN,EAAK8O,UAAY,GAJxC,QAQJ0E,iBAAmC,SAAUxT,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,cACpB5E,EAAUrN,EAAKyT,aAAatT,GACxBA,EAAK8O,UAAY,EACV5B,EAAQlN,EAAK8O,UAAY,GADpC,QAIJ2E,gBAAmC,SAAUzT,GAEzC,MADAA,GAAOA,GAAQH,EAAKiS,cAChB9R,IACAkN,EAAUlN,EAAKgP,aACX9B,GAAWA,EAAQrL,OAAS,GACrB7B,EAAKgP,aAAa,GAG1B,MAEX0E,kCAAmC,SAAU1T,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,eACpB5E,EAAUrN,EAAK0T,iBAAiBvT,IAErBkN,GAGXC,EAAUtN,EAAKuS,WAAWpS,GACnBH,EAAK6T,kCAAkCvG,KAElDwG,cAAmC,SAAU3T,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,cAEhB9R,GACAkN,EAAUrN,EAAK4T,gBAAgBzT,GAC3BkN,EACOA,EAEArN,EAAK6T,kCAAkC1T,IALtD,QASJ4T,cAAmC,SAAU5T,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,cAEhB9R,GACAkN,EAAUrN,EAAK2T,iBAAiBxT,IAErBH,EAAKgU,oBAAoB3G,GAGpCC,EAAUtN,EAAKuS,WAAWpS,GAN9B,QAUJ6T,oBAAmCtN,EAAMmJ,kBACzCoE,mBAAmC,SAAU9T,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,cAEhB9R,IACAmN,EAAUtN,EAAKuS,WAAWpS,IAEfH,EAAKkS,YAAY5E,GAHhC,QAOJ4G,kBAAmC,WAC/B,MAAOlU,GAAKkS,YAAYlS,EAAKuT,mBAEjCY,oBAAmC,SAAUhU,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,cAEhB9R,IACAkN,EAAUrN,EAAK0T,iBAAiBvT,IAErBH,EAAKkS,YAAY7E,GAHhC,QAOJ+G,oBAAmC,SAAUjU,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,cAEhB9R,IACAkN,EAAUrN,EAAK2T,iBAAiBxT,IAErBH,EAAKkS,YAAY7E,GAHhC,QAOJgH,iBAAmC,SAAUlU,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,cAEhB9R,IACAkN,EAAUrN,EAAK8T,cAAc3T,IAElBH,EAAKkS,YAAY7E,GAHhC,QAOJiH,iBAAmC,SAAUnU,GAGzC,MAFAA,GAAOA,GAAQH,EAAKiS,cAEhB9R,IACAkN,EAAUrN,EAAK+T,cAAc5T,IAElBH,EAAKkS,YAAY7E,GAHhC,QASR,OADA5N,SAAQ8U,OAAO7N,EAAM1G,KAAMA,GACpB0G,EAAM1G,KAGrB,OAAOuR,KAEbiD,UACE,WACI,WAAY,SAAUC,GAClB,OACIC,SAAU,IACVC,KAAU,SAAUjO,EAAOH,EAASqO,GAChClO,EAAMmO,OACFD,EAAME,QAAS,SAAUC,GACjBA,IACItV,QAAQiC,WAAW6E,EAAQtG,OAC3BsG,EAAQtG,QAERsG,EAAQ+E,KAAK,IAGjB/E,EAAQiD,OAAOiL,EAASM,GAASrO,YAQ5D8N,UACD,kBACI,WAAY,SAAUC,GAClB,OACIC,SAAU,IACVC,KAAU,SAAUjO,EAAOH,EAASqO,GAChClO,EAAMmO,OACFD,EAAMI,eAAgB,SAAUD,GACxBA,GACAxO,EAAQyD,YAAYyK,EAASM,GAASrO,WAOpE8N,UACE,oBAAqB,WACjB,OACIE,SAAU,IACVhO,OAAU,EACViO,KAAU,SAAUjO,EAAOH,EAASqO,GAChClO,EAAMC,MAAQ,oBACVD,EAAM4B,OAAOjI,QACbkG,EAAQ8B,SAAS3B,EAAM4B,OAAOjI,YAKhDmU,UACE,eACI,SAAU,QAAS,iBAAkB,WAAY,SAAUS,EAAQC,EAAOC,EAAgBV,GACtF,OACIC,SAAY,IACZU,WAAY,SAAUnO,EAAQU,EAAU0N,GACpCpO,EAAOqO,YAAc,GAEjBrO,EAAOqB,OAAOnI,OACdwH,EAASU,SAASpB,EAAOqB,OAAOnI,MAChC8G,EAAOqO,YAAcrO,EAAOqB,OAAOnI,KAGvC,IAAIoV,GAAkD,iBAAvBtO,GAAOuO,aAA2D,iBAAvBvO,GAAOwO,YAE7EC,EAAUL,EAAOM,WAEjBJ,IACAtO,EAAO2O,SAAS3O,EAAQA,EAAOyO,IAGnCzO,EAAO0C,iBAAmB,WACtB,MAAOlK,SAAQ8G,QAAQoB,EAAS,GAAGkO,cAAc,sBAGjDN,IAEAtO,EAAOU,SAAWA,EAClBV,EAAON,MAAQ,cAEfM,EAAO2H,QAAU,WACb,MAAO3H,GAAOyO,KAItBzO,EAAOI,aAAe,WAClB,MAAOJ,SAK7BuN,UACE,gBAAiB,SAAS,SAAUS,GAChC,OACIP,SAAU,IACVoB,SAAU,EACVnB,KAAU,SAAUjO,EAAOH,EAASqO,GAChClO,EAAMqP,aAAe,GACrBrP,EAAMC,MAAQ,eAEVD,EAAM4B,OAAOlI,QACbmG,EAAQ8B,SAAS3B,EAAM4B,OAAOlI,OAC9BsG,EAAMqP,aAAerP,EAAM4B,OAAOlI,YAKpDoU,UACE,WACI,YAAa,WAAY,QAAS,WAAY,UAAW,YAAa,iBACtE,mBAAoB,gBAAiB,iBAAkB,iBACvD,SAAUwB,EAAW9Q,EAAUgQ,EAAOT,EAAUvM,EAASkC,EAAW+K,EAC1Dc,EAAkBC,EAAe/Q,EAAgBgR,GACvD,OACIzB,SAAY,IACZhO,OAAY,EACZoP,SAAY,EACZV,YACI,SAAU,WAAY,SAAU,SAAUnO,EAAQU,EAAU0N,GACxDpO,EAAOmP,OAAS,GAChBnP,EAAOoP,YAAc,GACrBpP,EAAOqP,YAAc,KACrBrP,EAAOsB,YAAc,QACrBtB,EAAOsP,YAAc,UAGrBtP,EAAON,MAAQ,UAEfM,EAAOuP,kBACPvP,EAAOwP,YACPxP,EAAOqB,UAEPrB,EAAOvC,YACPuC,EAAOuH,cAGPvH,EAAOqB,OAAS7I,QAAQiX,KAAKR,GAC7BzW,QAAQ8U,OACJtN,EAAOqB,OAAO7H,MACVC,EAAM2U,EAAOsB,YAAc,4BAC3BhW,EAAM0U,EAAOuB,cAAgB,2BAC7BhW,KAAMyU,EAAOwB,UAAY,6BAIjC5P,EAAO7F,oBAAsB,SAAUjB,EAAMuS,GACzC,GAAIjT,QAAQiC,WAAWgR,GAAK,CACxB,GAAI/Q,GAAIC,EAAMC,CAEd,IAAI6Q,EAAGvS,GACH,OAAO,CAIX,KAFA0B,EAAS1B,EAAKgP,aACdvN,EAAOC,EAAOG,OACTL,EAAK,EAAQC,EAALD,EAAWA,IACpB,IAAKsF,EAAO7F,oBAAoBS,EAAOF,GAAK+Q,GACxC,OAAO,EAInB,OAAO,GAGXzL,EAAO4I,kBAAoB,SAAU1P,GACjC,GAAI2W,GAAY9E,CAIhB,OAHK7R,KACDA,EAAO8G,EAAOjH,KAAOiH,EAAOjH,KAAKiS,eAAgB,GAEjD9R,KAAS,GACF,GAEX6R,EAAI7R,EAAKgP,aAAanN,OACZ,IAANgQ,EACO7R,GAEP2W,EAAa3W,EAAKgP,aAAa6C,EAAI,GAC5B/K,EAAO4I,kBAAkBiH,MAIxC7P,EAAO0C,iBAAmB,WACtB,MAAOlK,SAAQ8G,QAAQoB,EAAS,GAAGkO,cAAc,sBAGrD5O,EAAO8P,QAAU,SAAU5W,GACnBV,QAAQI,UAAUoH,EAAOjH,OAASP,QAAQiC,WAAWuF,EAAOjH,KAAKgX,WAGjEC,WACI,WACIhQ,EAAOjH,KAAKgX,SAAS7W,IACtB,IAKf8G,EAAOiQ,SAAW,SAAU/W,GACpBV,QAAQI,UAAUoH,EAAOjH,QACrBG,IAAS8G,EAAOjH,KAAKiS,eACrBhL,EAAOjH,KAAKkS,YAAY/R,GAGxBV,QAAQiC,WAAWuF,EAAOjH,KAAKqS,YAC/B4E,WACI,WACIhQ,EAAOjH,KAAKqS,UAAUlS,IACvB,IAMnB,IAAIgX,GAAcrO,CAClB7B,GAAOmQ,aAAe,SAAUjX,EAAMkX,GAClCF,GAAe,EACX1X,QAAQiC,WAAW2V,KAAgBA,EAAWlX,GAC9CgX,GAAe,EACR1X,QAAQiC,WAAWuF,EAAOM,WAAW+P,UAAYrQ,EAAOM,WAAW+P,OAAOnX,KACjFgX,GAAe,GAGfA,GACIhX,EAAKgP,aAAanN,OAAS,IAC3B7B,EAAK+O,cAAgB/O,EAAK+O,eAKtCjI,EAAOsQ,QAAU,SAAUpX,GACvB,MAA2B,YAAvB8G,EAAOsP,YACA,IAAMpW,EAAKqX,WAAa,IAAMrX,EAAKsX,QAEnC,IAAMtX,EAAKqX,WAAa,IAAMrX,EAAK8G,EAAOsP,cAIzDtP,EAAOM,YACHnG,oBAAqB6F,EAAO7F,oBAC5BkW,OAAqB,SAAUnX,GAC3B,OAAO,GAEXsP,OAAqB,SAAU5H,EAAU6P,EAAQ/J,GAC7C,MAAO1G,GAAOwO,eAAgB,GAElCvL,WAAqB,SAAUyN,EAAOC,EAAUC,GAC5C,GAAIC,GAAO,EACPC,EAAOF,EAAW,EAAI5Q,EAAOoP,WAKjC,OAJKuB,KACDE,EAAO7Q,EAAOqP,YAAcrP,EAAOqP,YAAc,MAGrC,EAAZqB,EAAQ,EACDI,EAAOD,EAEP7Q,EAAOmP,QAAUuB,EAAQ,GAAKI,EAAOD,GAGpDzN,UAAqB,WACjB,MAAOpD,GAAOwO,eAAgB,GAElC5E,UAAqB,WACjB,MAAO5J,GAAOuO,eAAgB,GAElCrF,WAAqB,SAAU6H,GAC3B,OAAO,GAEXC,UAAqB,SAAU9X,GAC3B,GAAI8C,GAAO9C,EAAKsX,OAChBtX,GAAKsX,QAAUxM,KAAKiN,SAChB/X,EAAKgS,oBACEhS,GAAiB,aAGD,YAAvB8G,EAAOsP,cACPtT,EAAO,GAAK9C,EAAK8G,EAAOsP,aACxBtT,EAAOA,EAAK6S,QAAQ,SAAU,IAAM,KAAO3V,EAAKsX,QAEhDtX,EAAK8G,EAAOsP,aAAetT,IAInCqG,MAAqB,SAAUnJ,EAAMgY,GAGjC,MAFArP,GAASrJ,QAAQiX,KAAKvW,GACtBiY,KAAKhX,oBAAoB0H,EAAQsP,KAAKH,WAC/BnP,GAEXiB,OAAqB,SAAU5J,EAAMgH,EAAQgR,GACzC,MAAOhR,GAAO4L,OAAO5S,EAAK8O,UAAW,GAAG,IAE5CoJ,IAAqB,SAAUlY,EAAM4H,EAAKZ,EAAQgR,GAC1ChR,IACIA,EAAOnF,OAAS,IACZ+F,EAAM,GACNZ,EAAO4L,OAAOhL,EAAK,EAAG5H,GAM1BgH,EAAO3C,KAAKrE,OAMxBkV,EAAOiD,YAAcjD,EAAOkD,cAC5BtR,EAAOzB,SAAW,KAElByB,EAAOuO,YAAc,KACrBvO,EAAOwO,YAAc,KACrBxO,EAAOyH,WAAa,KAEhB2G,EAAOiD,aAEPrR,EAAO8J,UAAY,EACnB9J,EAAOwC,aAAc,EACrBxC,EAAOuR,YAAa,EACpBvR,EAAOkK,eAAgB,EACvBlK,EAAO+B,gBAAkB,KACzB/B,EAAO4K,UAAY,KACnB5K,EAAOwR,SAAW,KAElBhZ,QAAQ8U,OACJtN,EAAOM,YACHC,WAAY,SAAUkR,GAClB,OAAO,GAEXhI,SAAY,SAAUsH,EAAOW,KAC7BnI,QAAY,SAAUoI,EAAMC,EAAMC,GAC9B,IAAKF,EACD,MAAO,KAGX,KAAKA,EAAKlJ,SAAWoJ,EACjB,OAAO,CAEX,IAAI1P,GAAQwP,EAAKzY,KACb4Y,EAAW,KACXjL,EAAQ8K,EAAK7K,KACbT,EAAU,KACV0L,EAAiBJ,EAAKzR,QAAUyR,EAAKrY,KAAKmE,SAC1CuU,EAAcnL,EAAM3G,QAAUyR,EAAKpS,OAAO9B,QAE9C,OAAIkU,GAAKpS,OAAOe,WAAWkI,OAAOmJ,EAAMA,EAAK7K,KAAM6K,EAAKlJ,UAChDoJ,GACAxL,EAAU0L,EACNvZ,QAAQI,UAAUyN,EAAQ6B,gBAC1B7B,EAAUA,EAAQ6B,cAGtB4J,EAAWH,EAAKrY,KAAKgH,WAAWwC,OAC5BX,EACAkE,EACAsL,EAAKrY,KAAKgH,aAGdwR,EAAWH,EAAKrY,KAAKgH,WAAW+B,MAAMF,EAAOwP,EAAKrY,KAAKgH,YAKvDuR,GACAF,EAAKrY,OAASqY,EAAKpS,QACnBwS,IAAkBC,GAClBnL,EAAM/F,KAAO6Q,EAAKzY,KAAK8O,WACvBnB,EAAM/F,MAGVuF,EAAU2L,EACN3L,EAAQ6B,eACR7B,EAAUA,EAAQ6B,cAGtByJ,EAAKpS,OAAOe,WAAW8Q,IACnBU,EACAjL,EAAM/F,IACNuF,EACAsL,EAAKrY,KAAKgH,aAGP,IAGJ,GAEXyE,UAAY,SAAUgM,KACtBjI,SAAY,SAAUiI,OAI9B/Q,EAAOa,YAAc,SAAUD,GAC3BZ,EAAOwR,SAAW5Q,GAGtBZ,EAAOoK,WAAa,SAAU1R,GAEtBsH,EAAOwC,YADQ,iBAAR9J,GACcA,GAEA,GAIzB0V,EAAO6D,eACPjS,EAAOwD,eAAgB,EAEvBxD,EAAOoJ,WAAa,WACZpJ,EAAO4K,WACP5K,EAAO4K,UAAUxJ,SAASpB,EAAOqB,OAAOpI,SAIhD+G,EAAOyD,cAAgB,WACnB,GAAKzD,EAAOwR,UAIRxR,EAAOwD,cAAe,CACtB,GAAI0O,GAAelS,EAAO4K,SAEtB5K,GAAO4K,UAAYpS,QAAQ8G,QAD3BU,EAAOwC,YAC4BwM,EAAiBmD,QAAQnS,GAEzBgP,EAAiBoD,QAAQpS,IAG5DkS,IAAiBlS,EAAO4K,YACpBsH,IACAlS,EAAO4K,UAAUyH,KAAK,QAASH,EAAaG,KAAK,UACjDrS,EAAO4K,UAAUyH,KAAK,QAASH,EAAaG,KAAK,UACjDH,EAAapP,UAEjBK,EAAUN,KAAK,QAAQN,OAAOvC,EAAO4K,YAIzC5K,EAAO4K,UAAUzB,YAAYnJ,EAAOqB,OAAOpI,UAInD+G,EAAO0D,kBAAoB,SAAUrF,GAC7B2B,EAAO4K,YACP5K,EAAO4K,UAAUrJ,KAET3C,KAAWP,EAAEQ,MAAQ,GAAK,KAC1BJ,IAAWJ,EAAEK,MAAQ,GAAK,KAC1B8C,UAAW,OAGnBxB,EAAO4K,UAAUxJ,SAASpB,EAAOqB,OAAO9H,YAMxDyG,EAAOuD,WAAY,EAEnBvD,EAAO+H,eAAiB,SAAU7O,GAC9B,GAAIA,GAAQA,EAAK8O,UAAY,EAAG,CAC5B,GAAI3B,GAASiM,EAASpZ,EAAK8O,UAAY,CAEvC,OAAIxP,SAAQI,UAAUM,EAAK2O,kBACvBxB,EAAUrG,EAAOuH,WAAWrO,EAAK2O,iBAC1BxB,EAAQ6B,aAAaoK,IAEzBtS,EAAOvC,SAAS6U,GAG3B,MAAO,OAGXtS,EAAO4H,QAAU,SAAUiE,GACvB,MAAIrT,SAAQC,kBAAkBoT,GACnB,KAEJ7L,EAAOuH,WAAWsE,IAG7B7L,EAAO2O,SAAW,SAAUlP,EAAOvG,GAC/B,GAAIqZ,GAAQvS,EAAOsQ,QAAQpX,EACvB8G,GAAOwP,SAAS+C,KAAW9S,IAC3BO,EAAOwP,SAAS+C,GAAS9S,IAIjCO,EAAOoC,SAAW,SAAUlJ,GACxB,MAAIA,GACO8G,EAAOwP,SAASxP,EAAOsQ,QAAQpX,IAEnC8G,GAIXA,EAAOqD,UAAY,SAAU/D,EAAS0B,GAElC,GAAIP,GAAU,KACVE,GAAU,CAUd,IARIrB,GACAmB,EAAUnB,EAAQO,KAAK,WAAWC,cAClCa,EAAuB,OAAZF,GAAgC,OAAZA,IAE/BA,EAAUT,EAAO0C,mBAAmB7C,KAAK,WAAWC,cACpDa,EAAuB,UAAZF,GAAmC,UAAZA,IAGjCT,EAAOzB,SAER,GAAIoC,EAAS,CACTX,EAAOzB,SAAW/F,QAAQ8G,QAAQ2B,EAAQC,SAASC,cAAc,MACjE,IAAIqR,GAAYxS,EAAOuP,eAAexU,MAOtC,KANAiF,EAAOzB,SAASgE,OACZ/J,QAAQ8G,QAAQ2B,EAAQC,SAASC,cAAc,OAC1CC,SAASpB,EAAOqB,OAAOrI,OACvBoI,SAAS,YACTA,SAASpB,EAAOqB,OAAOhI,QAEzBmZ,IAAc,GACjBxS,EAAOzB,SAASgE,OACZ/J,QAAQ8G,QAAQ2B,EAAQC,SAASC,cAAc,OAC1CC,SAASpB,EAAOqB,OAAOrI,OACvBoI,SAASpB,EAAOqB,OAAOhI,YAIpC2G,GAAOzB,SAAW/F,QAAQ8G,QAAQ2B,EAAQC,SAASC,cAAc,OAC5DC,SAASpB,EAAOqB,OAAOrI,OACvBoI,SAASpB,EAAOqB,OAAOhI,MAepC,OAVI2H,IACAhB,EAAOzB,SAASgD,IAAI,SAAUrD,EAAeS,OAAOqC,GAAW,MAG/D1B,EACAA,EAAQ,GAAGoJ,WAAWC,aAAa3I,EAAOzB,SAAS,GAAIe,EAAQ,IAE/DU,EAAO0C,mBAAmBH,OAAOvC,EAAOzB,UAGrCyB,EAAOzB,UAGlByB,EAAOsH,UAAY,WACXtH,EAAOzB,UACPyB,EAAOzB,SAAS6C,SAASpB,EAAOqB,OAAOpI,SAI/C+G,EAAOsD,UAAY,WACXtD,EAAOzB,UACPyB,EAAOzB,SAAS4K,YAAYnJ,EAAOqB,OAAOpI,SAIlD+G,EAAOqH,aAAe,WAClB,MAAOrH,KAKfA,EAAO8E,WAAa,SAAU2G,GAC1B,GAAIgH,GAAQtB,KAAKuB,MAAMC,OACT,YAAVF,GAAgC,YAAVA,EAClBhH,GAAsB,kBAAT,IACbA,IAGJ0F,KAAKyB,OAAOnH,GAIpB,IAyCIoH,GACAC,EACAC,EAmJAha,EA+NAia,EACA1W,EAAGC,EACH0W,EACAC,EAAQC,EAAQC,EAAWC,EAASC,EAAOC,EAASC,EAhapDC,EAAc,WACV,GAAIzT,EAAOvC,UAAYuC,EAAOvC,SAAS1C,OAAQ,CAC3C,GAEIJ,GACA2B,EAHAoX,EAAa1T,EAAOvC,SAAS,GAAIkW,EAAQxX,OAAOC,KAAKsX,GACrDtY,EAAS,GAAIC,QAAO,yBAIxB,KAAKiB,EAAI,EAAG3B,EAAOgZ,EAAM5Y,OAAYJ,EAAJ2B,EAAUA,IACvC,GAAsC,gBAA1BoX,GAAWC,EAAMrX,MAAsBlB,EAAOE,KAAKqY,EAAMrX,IAEjE,YADA0D,EAAO4T,kBAAoBD,EAAMrX,GAMrC9D,SAAQC,kBAAkBuH,EAAO4T,qBACjC5T,EAAO4T,kBAAoBD,EAAM,MAK7CE,EAAa,WAET,GAAI7T,EAAOvC,SAAS1C,OAAQ,CACxB,GAGIuB,GAAG3B,EAHHmZ,KAAgBJ,EAAa1T,EAAOvC,SAAS,GAC7CrC,EAAS,GAAIC,QAAO,4BAA+B2E,EAAO4T,kBAAoB,MAC9ED,EAAQxX,OAAOC,KAAKsX,EAGxB,KAAKpX,EAAI,EAAG3B,EAAOgZ,EAAM5Y,OAAYJ,EAAJ2B,EAAUA,IACD,gBAA1BoX,GAAWC,EAAMrX,KAAsBlB,EAAOE,KAAKqY,EAAMrX,KACjEwX,EAAUvW,MAEFtB,MAAO0X,EAAMrX,IAK7B0D,GAAOuP,eAAiBuE,IAMhCC,EAAO,SAAUC,EAAM9a,EAAMgH,EAAQ+T,EAAavD,EAAOwD,EAASrI,GAC9D,GAAInR,GAAIC,EAAMwZ,EAAOC,EAAaC,EAAOC,CAuCzC,IAtCK9b,QAAQ2C,QAAQjC,EAAKgP,gBACtBhP,EAAKgP,iBAGThP,EAAK2O,gBAAkBoM,EACvB/a,EAAKqX,WAAarQ,EAClBvF,EAAOzB,EAAKgP,aAAanN,OAErBvC,QAAQC,kBAAkBS,EAAK+O,eAAiBtN,EAAO,IACvDzB,EAAK+O,aAAeyI,EAAQ1Q,EAAOuU,aAInCJ,EADS,IAATxZ,EACQ,GAEJzB,EAAK+O,aACG,EAEA,EAIhBmM,EAAcJ,EAAKjZ,OACnB7B,EAAK8O,UAAY6D,EACjB3S,EAAKiP,eAAiBiM,EACtBlb,EAAKgJ,UAAYwO,EACjBxX,EAAKsb,SAAWL,EAChBjb,EAAKub,eAAiBzU,EAAOqB,OAAO7H,KAAK2a,GACzCjb,EAAKqP,cAAgB2L,EAEjB1b,QAAQC,kBAAkBS,EAAKsX,WAC/BtX,EAAKsX,QAAU,GAAKxM,KAAKiN,UAG7B+C,EAAKzW,KAAKrE,GAGVmb,EAAQ,EACJ1Z,EAAO,EACP,IAAKD,EAAK,EAAQC,EAALD,EAAWA,IACpB2Z,GAASN,EACLC,EACA9a,EAAKgP,aAAaxN,GACM,YAAvBsF,EAAOsP,YAA6BpW,EAAKsX,QAAUtX,EAAK8G,EAAOsP,aAChE8E,EACA1D,EAAQ,EACRwD,GAAWhb,EAAK+O,aAChBvN,EAcZ,OATA4Z,GAAWtU,EAAOsQ,QAAQpX,IAEtBV,QAAQC,kBAAkBS,EAAKwb,cAAgBxb,EAAKwb,cAAgBJ,KACpEpb,EAAKwb,YAAcJ,GAIvBpb,EAAKyb,SAAWN,EAETA,GAEX3I,EAAc,SAAUkJ,GACpB,GAAIC,GACAla,EACAma,IACJ,IAAItc,QAAQI,UAAUgc,GAAQ,CAC1B,IAAKpc,QAAQ2C,QAAQyZ,IAA2B,IAAjBA,EAAM7Z,OACjC,QAEA8Z,GAAQD,MAET,CAAA,IAAKpc,QAAQ2C,QAAQ6E,EAAOvC,WAAwC,IAA3BuC,EAAOvC,SAAS1C,OAC5D,QAEA8Z,GAAQ7U,EAAOvC,SAgCnB,GA7BK2Q,EAAO2G,UACRtB,IAGCrF,EAAO4G,YACRnB,IAGArb,QAAQI,UAAUoH,EAAOjC,WACpBvF,QAAQiC,WAAWqY,KACpBA,EAAiB5D,EAAe,oBAGhC1W,QAAQiC,WAAWqY,KACnB+B,EAAQ/B,EAAe+B,EAAO7U,EAAOjC,WAIzCvF,QAAQI,UAAUoH,EAAO9C,UACpB1E,QAAQiC,WAAWoY,KACpBA,EAAgB3D,EAAe,mBAG/B1W,QAAQiC,WAAWoY,KACnBgC,EAAQhC,EAAcgC,EAAO7U,EAAO9C,OAAQ8C,EAAOiV,iBAI3Dta,EAAOka,EAAM9Z,OACTJ,EAAO,EAAG,CACV,GAAID,GACAyD,EAAS+W,EAAMC,EAAMxB,EACrByB,EAAa,CAEjB,KAAK1a,EAAK,EAAQC,EAALD,EAAWA,IACpB0a,GAAcrB,EAAKe,EAAaD,EAAMna,GAAK,KAAM,KAAM,GAAG,EAAMA,EAQpE,IAJAiZ,EAAQxX,OAAOC,KAAK4D,EAAOwP,UAC3B7U,EAAOqF,EAAOwP,SAASzU,OACvBoD,EAAUxD,EAAOya,EAED,IAAZjX,EAGA,IAFA+W,EAAOva,EAAOwD,EACdgX,EAAOD,EAAOlR,KAAKqR,IAAIlX,GAClBzD,EAAKya,EAAWD,EAALxa,EAAWA,UAChBsF,GAAOwP,SAASmE,EAAMjZ,IAWzC,MALIlC,SAAQI,UAAUoH,EAAOuH,mBAClBvH,GAAiB,WAG5BA,EAAOuH,WAAauN,EACbA,GAEXQ,GACIvY,YAAY,EACZC,WAAY,EACZG,UAAY,GAGhBoY,EAAmB,SAAU5H,EAAO6H,EAAW7Z,GAC3C,MAAInD,SAAQC,kBAAkB+c,IACnB,EAGO,MAAdA,GAAsBhd,QAAQG,YAAYgV,EAAM6H,IAIhDhd,QAAQ2C,QAAQqa,GACTC,EAAe9H,EAAO6H,EAAW7Z,GAD5C,QAHW,GAOf8Z,EAAiB,SAAU9H,EAAO+H,EAAO/Z,GACrC,GAAIW,GAAGC,EAAMmZ,EAAM3a,OAAQyB,GAAS,CAEpC,IAAY,IAARD,EACA,MAAO,KAEX,KAAKD,EAAI,EAAOC,EAAJD,EAASA,IACjB,GAAIiZ,EAAiB5H,EAAO+H,EAAMpZ,IAAKX,IAEnC,GADAa,GAAS,GACJb,EACD,OAAO,MAGX,IAAIA,EACA,OAAO,CAKnB,OAAOa,IAEXmZ,EAAgB,SAAUC,EAAMC,EAAUC,EAAYC,EAAWC,EAAYzb,EAASD,GAElF,GADAyb,EAAYA,GAAaF,EACL,gBAATD,IAAqBpd,QAAQ2C,QAAQya,GAAO,CACnD,GAAIpd,QAAQiC,WAAWH,IAAaA,IAChC,MAE4B,iBAArB8T,GAAOyH,GACd7V,EAAO4N,OACHQ,EAAOyH,GAAW,SAAUnd,GAIpBsH,EAAO+V,GAHU,gBAATH,UAA4Bld,KAAQkd,GAC3Cpd,QAAQ2C,QAAQya,IAASA,EAAKpa,cAAe9C,IAAO,GAEjCA,EAEhBF,QAAQiC,WAAWqb,GACCA,EAAWpd,GAEXod,EAIxBtd,QAAQiC,WAAWF,IACnBA,EAAQyF,EAAO+V,GAAY/V,KAEhC,GAIHxH,QAAQiC,WAAWub,GACnBhW,EAAO+V,GAAaC,IACZxd,QAAQG,YAAYqd,KAC5BhW,EAAO+V,GAAaC,KAKpCC,IAEQ,eACC,UAAW,eAAgB,KAAM,kBACjC,UAAW,aAAc,KAAM,gBAC/B,SAAU,YAAa,EAAG,KAAM,IAChC,UAAW,iBAAkB,KAAM,oBAEhC,UAAW,eAAgB,KAAM,gBAAiB,KAAM,SAAUC,GAE9DlW,EAAOwC,YADP0T,GACqB,EAEAlW,EAAOuR,iBAKnC,aAAc,kBAEX,SAAU,eAAgBnD,EAAO+H,aAAc,eAAgB,KAC/D,SAAUC,GACFA,GAAQlI,EAAemI,IAAID,IAC3BpH,EAAiBsH,QAAQF,EAAMpW,MAIvC,SAAU,eAAgBoO,EAAOmI,aAAc,eAAgB,KAC/D,SAAUH,GACFA,GAAQlI,EAAemI,IAAID,IAC3BpH,EAAiBwH,QAAQJ,EAAMpW,UAKzC,aAAc,iBACf,SAAU,aAAc,GAAI,aAAc,OAG3C,MACC,UAAW,eAER,WAAY,YAAa,SAAUtH,GACnC,aAAeA,IACX,IAAK,SACDsH,EAAOsB,YAAc5I,CACrB,MACJ,KAAK,SACDF,QAAQ8U,OAAOtN,EAAOqB,OAAQ3I,GAC9BsH,EAAOsB,YAActB,EAAOqB,OAAOtI,IACnC,MACJ,SACIiH,EAAOsB,YAAc8M,EAAOqI,YAGrC,YAAa,WACZzW,EAAOsB,YAActB,EAAOqB,OAAOtI,KAAO,UAC3C,KAAM,WACL,MAAI,sBAAsBuC,KAAK,IAAM8S,EAAOqI,YACxCzW,EAAOsB,YAAc8M,EAAOqI,UAAUC,QAC/B,GAFX,WAMC,SAAU,UAAW,WAAYjD,EAAa,oBAAqBA,EACpE,SAAUsB,GACFvc,QAAQC,kBAAkBsc,KAC1B/U,EAAO4T,kBAAoBxF,EAAO2G,aAI1C,SAAU,cAAevc,QAAQI,UAAUoH,EAAOjH,MAAQiH,EAAOjH,QACjE,OAAQ,KAAM,SAAU4d,GAExB3W,EAAO0L,YAAcA,EAEhBlT,QAAQiC,WAAWsY,KACpBA,EAAgB7D,EAAe,oBAG/B1W,QAAQiC,WAAWsY,KACnBha,EAAOP,QAAQ8U,OACXqJ,EACA5D,EAAc/S,SAKrB,QAAS,UAAW,aAAc6T,EAAY,iBAAkBA,EACjE,SAAU+C,IACFpe,QAAQC,kBAAkBme,KAAape,QAAQ2C,QAAQyb,MACvD5W,EAAOuP,eAAiBsE,SAGlC,SAAU,SAAU,QAAS,YAAa,UAAWzF,EAAOrQ,WAEzD,SAAU,SAAU,SAAU,KAAM,SAAU,KAAM,SAAUV,GAC/D,GAAI2L,IAAU,CACd,IAAIxQ,QAAQI,UAAUyE,KAAa7E,QAAQ2C,QAAQkC,GAAU,CACzD,GAC2BvD,GADvBE,EAASmC,OAAOC,KAAKiB,GACrBtD,EAAQC,EAAOe,MAEnB,IAAIhB,EAAQ,EACR,IAAKD,EAAM,EAASC,EAAND,EAAaA,IAEvB,GAAsC,gBAA1BuD,GAAQrD,EAAOF,KACS,IAAhCuD,EAAQrD,EAAOF,IAAMiB,OADzB,CAIAiO,GAAU,CACV,QAKZhJ,EAAO6W,cAAgB7N,EACvB0C,OAGA,SAAU,gBAAiB4J,EAAsB,gBACjDA,EAAsB,SAAUwB,GACV,gBAAXA,KACP9W,EAAOiV,cAAgBzc,QAAQ8U,OAAOgI,EAAsBwB,OAGnE,SAAU,aAAc1I,EAAO2I,WAAY,cAAe,YAC1D,SAAU,aAAc3I,EAAO4I,WAAY,gBAC3C,SAAU,SAAU,GAAI,KAAM,KAC9B,SAAU,aAAc,GAAI,KAAM,KAE/B,OAAQ,YACR,SAAUC,GAUN,MATAze,SAAQ0e,QACJD,EAAc,SAAUE,EAAOC,GACN,kBAAVD,IACHnX,EAAOM,WAAW8W,KAClBpX,EAAOM,WAAW8W,GAAOD,KAKlCnX,EAAOM,YAElB,eAGA,SAAU,cAAe,EAAG,cAAe,EAAG,WAC9CoL,OAEH,UAAW,aAAc,KAAM,gBAC/B,UAAW,aAAc,KAAM,kBAGrC2L,EAAOpB,EAASlb,MAIvB,KAAKiY,EAAI,EAAOqE,EAAJrE,EAAUA,IAElB,GAAKuC,EAAiBnH,EAAQ6H,EAASjD,GAAG,IAAI,GAI9C,IADAC,EAAQgD,EAASjD,GAAG,GACf1W,EAAI,EAAGC,EAAM0W,EAAMlY,OAAYwB,EAAJD,EAASA,IACrC4W,EAASD,EAAM3W,GAAG,GAClB6W,EAASF,EAAM3W,GAAG,GAClB8W,EAAYH,EAAM3W,GAAG,GACrB+W,EAAUJ,EAAM3W,GAAG,GACnBgX,EAAQL,EAAM3W,GAAG,GACjBiX,EAAUN,EAAM3W,GAAG,GACnBkX,EAAWP,EAAM3W,GAAG,GACpBqZ,EAAczC,EAAQC,EAAQC,EAAWC,EAASC,EAAOC,EAASC,EAItEpF,GAAO3Q,UACPuC,EAAO4N,OACHQ,EAAO3Q,SAAU,SAAU/E,GACvBsH,EAAOvC,SAAW/E,IACnB,GAIXsH,EAAO4N,OACH,WAAY,WACRlC,MACD,KAGfmC,QAAY,SAAiByJ,GAEzB,GAAIC,GAAa,GACb3V,EAAW0V,EAASjT,OAAOqS,MAM/B,OALI9U,GAAS7G,OAAS,IAClBwc,EAAa3V,EACb0V,EAASjT,KAAK,KAGX,SAAgB5E,EAAOH,EAASqO,GAEnC,GAAIA,EAAM0D,WAAY,CAClB,GAAImG,GAActI,EAAe,eAC7B1W,SAAQiC,WAAW+c,IACnBA,EAAY/X,EAAOH,EAAS2B,EAASkC,GAK7C7D,EAAQmY,MAAM,WAEVhY,EAAMqF,WACF,WACQyS,EAAWxc,OAAS,EACpBuE,EAAQiD,OAAOiL,EAAS+J,GAAY9X,IAEpCwO,EAAMoI,IACF1I,EAAM+J,aAAe1I,EAAiB2I,WACrCC,MAAO1J,IACV2J,QACE,SAAUC,GACNxY,EAAQiD,OAAOiL,EAASsK,EAAKpB,QAAQjX,IACrCA,EAAMiB,SAAWlI,QAAQ8G,QAAQA,EAAQ,GAAGsP,cAAc,iCAYxGhV,QACE,kBAAmB,WACf,GAAIme,IACAC,UAAW,SAAUF,EAAMf,EAAYkB,GACnC,IAAKH,GAAwB,IAAhBA,EAAK/c,SAAiBgc,IAAekB,EAC9C,QAUJ,KARA,GAKIC,GAAUhY,EALVnH,KACAof,KACAC,EAAON,EAAK,GACZO,EAAWD,EAAKrB,GAChBuB,KAEA/b,EAAMub,EAAK/c,OACXuB,EAAI,EACGC,EAAJD,GACH8b,EAAON,EAAKxb,KACZ+b,EAAWD,EAAKrB,GAChBuB,EAASD,GAAYD,EACrBF,EAAWE,EAAKH,GACZC,GACAhY,EAASoY,EAASJ,GACdhY,EAAOgI,aACPhI,EAAOgI,aAAa3K,KAAK6a,GAEzBlY,EAAOgI,cAAgBkQ,IAG3BD,EAAQ5a,KAAK8a,EAIrB,KADA9b,EAAM4b,EAAQpd,OACTuB,EAAI,EAAOC,EAAJD,EAASA,IACjBvD,EAAKwE,KAAK+a,EAASH,EAAQ7b,IAE/B,OAAOvD,IAEXwf,UAAW,QAASC,GAAaV,EAAMG,GACnC,GACIvd,GAEA+d,EAAOC,EAHPC,KAEAhe,EAAOmd,EAAOA,EAAK/c,OAAS,CAEhC,KAAKL,EAAK,EAAQC,EAALD,EAAWA,IACpB+d,EAAQjgB,QAAQiX,KAAKqI,EAAKpd,IACtBlC,QAAQ2C,QAAQsd,EAAMR,KAAeQ,EAAMR,GAAWld,OAAS,IAC/D2d,EAASF,EAAaC,EAAMR,GAAYA,SACjCQ,GAAMR,GACbQ,EAAMvQ,aAAewQ,GAEzBC,EAAMpb,KAAKkb,EAEf,OAAOE,IAIf,OAAOZ,KAEbne,QACE,kBACI,YAAa,UAAW,SAAUuJ,EAAWlC,GACzC,GAAI2X,IACA3Y,OAAiB,SAAU6F,GACvB,MAAkD,mBAAnCA,GAAUuM,KAAK,gBAElC7R,SAAiB,SAAUnC,GACvB,GAAIwa,GAAMxa,CAMV,OALwBya,UAApBza,EAAE0a,cACFF,EAAMxa,EAAE0a,cAAcX,KAAK,GACAU,SAApBza,EAAEe,eAAiE0Z,SAAlCza,EAAEe,cAAc2Z,gBACxDF,EAAMxa,EAAEe,cAAc2Z,cAAcX,KAAK,IAEtCS,GAEXjY,SAAiB,SAAUnB,GACvB,GAAI0C,GAAQ1C,EAAMkI,UACdgR,EAAQlZ,EAAM4H,eACdhB,EAAU5G,EAAMmI,QAAQzF,EAAM0F,gBAClC,QACI3O,KAASiJ,EACTjC,OAASmG,EACTS,MACI5G,OAAQmG,EACRvF,IAAQqB,EAAM6F,WAElBvI,MAASA,EACTF,OAASoZ,EACTrf,KAASqf,EACT1R,KAASxH,EAAMsI,eAAe5F,GAC9BsG,SAAS,IAGjB9J,OAAiB,SAAUW,GACvB,MAAOA,GAAQO,KAAK,iBAExBf,MAAiB,SAAUQ,GACvB,MAAOA,GAAQO,KAAK,gBAExBrB,OAAiB,SAAUc,GACvB,GAAI0Z,GAAqB1Z,EAAQ,GAAG2Z,uBACpC,QACIna,MAAQQ,EAAQO,KAAK,eACrBlB,OAAQW,EAAQO,KAAK,gBACrBpB,IAAQua,EAAmBva,KAAOwC,EAAQsE,aAAepC,EAAU,GAAGe,KAAKuB,WAAatC,EAAU,GAAGqC,gBAAgBC,WACrH7G,KAAQoa,EAAmBpa,MAAQqC,EAAQiY,aAAe/V,EAAU,GAAGe,KAAKsC,YAAcrD,EAAU,GAAGqC,gBAAgBgB,cAG/HzF,gBAAiB,SAAU1C,EAAGkB,GAC1B,GAAIuB,KAOJ,OANAA,GAAIkC,QAAU3E,EAAEQ,MAAQsS,KAAK3S,OAAOe,GAAQX,KAC5CkC,EAAIoC,QAAU7E,EAAEK,MAAQyS,KAAK3S,OAAOe,GAAQd,IAC5CqC,EAAIqY,OAASrY,EAAIsY,MAAQ/a,EAAEQ,MAC3BiC,EAAIuY,OAASvY,EAAIwY,MAAQjb,EAAEK,MAC3BoC,EAAIyY,KAAOzY,EAAI0Y,KAAO1Y,EAAIwH,MAAQxH,EAAI2Y,MAAQ3Y,EAAI0G,MAAQ,EAC1D1G,EAAI4Y,KAAO5Y,EAAI6Y,KAAO7Y,EAAI8Y,SAAW9Y,EAAI+Y,SAAW/Y,EAAIsH,QAAUtH,EAAIgZ,QAAU,EACzEhZ,GAEX+E,cAAiB,SAAUxH,EAAGyC,EAAKT,GAE/BS,EAAIsY,MAAQtY,EAAIyY,KAChBzY,EAAIwY,MAAQxY,EAAI0Y,KAEhB1Y,EAAIyY,KAAOlb,EAAEQ,MACbiC,EAAI0Y,KAAOnb,EAAEK,MAEboC,EAAIwH,MAAQxH,EAAIyY,KAAOzY,EAAIsY,MAC3BtY,EAAI2Y,MAAQ3Y,EAAI0Y,KAAO1Y,EAAIwY,MAE3BxY,EAAI8Y,SAAW9Y,EAAI4Y,KACnB5Y,EAAI+Y,SAAW/Y,EAAI6Y,KAEnB7Y,EAAI4Y,KAAqB,IAAd5Y,EAAIwH,MAAc,EAAIxH,EAAIwH,MAAQ,EAAI,EAAI,GACrDxH,EAAI6Y,KAAqB,IAAd7Y,EAAI2Y,MAAc,EAAI3Y,EAAI2Y,MAAQ,EAAI,EAAI,EAErD,IAAIM,GAAQ/V,KAAKqR,IAAIvU,EAAIwH,OAAStE,KAAKqR,IAAIvU,EAAI2Y,OAAS,EAAI,CAE5D,OAAIpZ,IACAS,EAAI0G,MAAQuS,OACZjZ,EAAIkZ,QAAS,KAIblZ,EAAI0G,QAAUuS,GACdjZ,EAAIsH,QAAU,EACdtH,EAAIgZ,QAAU,IAEdhZ,EAAIsH,SAAWpE,KAAKqR,IAAIvU,EAAIwH,OACX,IAAbxH,EAAI4Y,MAAc5Y,EAAI4Y,OAAS5Y,EAAI8Y,WACnC9Y,EAAIsH,QAAU;AAElBtH,EAAIgZ,SAAW9V,KAAKqR,IAAIvU,EAAI2Y,OACX,IAAb3Y,EAAI6Y,MAAc7Y,EAAI6Y,OAAS7Y,EAAI+Y,WACnC/Y,EAAIgZ,QAAU,SAGtBhZ,EAAI0G,MAAQuS,KAEhBzX,cAAiB,SAAU7C,EAAOH,EAAS6P,EAAQkD,GAC/CA,EAAOA,EAAOA,EAAO,OACrB7Z,QAAQ8G,QAAQA,EAAQ2a,WAAW,IAAI1Y,IAAI8Q,EAAM5S,EAAMa,WAAW2C,WAAWkM,KAGrF,OAAOyJ,MAEjBhf,QACE,kBAAkB,YAAa,SAAUmV,GACrC,GAAImL,GAAS,SAAUvc,GACf,MAAInF,SAAQI,UAAUmW,IAAcA,EAAUoL,IAAIxc,GACvCoR,EAAUsH,IAAI1Y,GAElB,KAEf,OAAOuc,MAEbtgB,QACE,oBACI,iBAAkB,SAAUsU,GACxB,GAIIkM,GAJAC,EAAe,gCACfC,EAAW,0CACXC,EAAW,0CACXC,KAEAlQ,GACIkM,QAAS,SAAUiE,EAAMhb,GAChB+a,EAAO/a,EAAMib,OACdF,EAAO/a,EAAMib,SAEjBF,EAAO/a,EAAMib,KAAKH,SAAWE,GAEjCnE,QAAS,SAAUmE,EAAMhb,GAChB+a,EAAO/a,EAAMib,OACdF,EAAO/a,EAAMib,SAEjBF,EAAO/a,EAAMib,KAAKJ,SAAWG,GAEjC9C,QAAS,WACL,MAAO0C,IAEXjI,QAAS,SAAU3S,GACf,MAAI+a,GAAO/a,EAAMib,MAAQF,EAAO/a,EAAMib,KAAKJ,WACvCF,EAAOlM,EAAemI,IAAImE,EAAO/a,EAAMib,KAAKJ,WAEjCF,EAGRlM,EAAemI,IAAIiE,IAE9BnI,QAAS,SAAU1S,GACf,MAAI+a,GAAO/a,EAAMib,MAAQF,EAAO/a,EAAMib,KAAKH,WACvCH,EAAOlM,EAAemI,IAAImE,EAAO/a,EAAMib,KAAKH,WAEjCH,EAGRlM,EAAemI,IAAIkE,IAItC,OAAOjQ,MAInB9R,QAAQK,OAAO,oCAAqC8hB,KAE5C,iBAAkB,SAAUzM,GAC5BA,EAAe0M,IACX,iCACC,iCACA,cACA,SACA,4FACA,6FACA,gBACA,qGACA,4CACA,aACA,YACA,eACA,0BACA,kHACA,sFACA,mCACA,4IACA,mDACA,wDACA,gCACA,oFACA,8CACA,qBACA,4EACA,eACA,kGACA,0CACA,kCACA,eACA,YACA,eACA,YAAYC,KAAK,KAGtB3M,EAAe0M,IACX,0CACA,iEAGJ1M,EAAe0M,IACX,0CACA,0EAKTE,KAAKxV","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.4\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = function (val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    angular.isDefined = function (val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _iF, _lenF, _keysF,\r\n                _filter,\r\n                _state,\r\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes,\r\n                        _nodePassed = fnBefore(options, node),\r\n                        _childPassed = false;\r\n\r\n                    if (angular.isDefined(node[fieldChild])) {\r\n                        _nodes = node[fieldChild];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                    }\r\n\r\n                    return _nodePassed || _childPassed;\r\n                },\r\n                // Check data by filter\r\n                _fnCheck = function _fnCheck(callback, check) {\r\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\r\n                        return null;\r\n                    }\r\n\r\n                    if (angular.isFunction(callback)) {\r\n                        return callback(check, $filter);\r\n                    } else {\r\n                        if (typeof callback === 'boolean') {\r\n                            check = !!check;\r\n                            return check === callback;\r\n                        } else if (angular.isDefined(callback)) {\r\n                            try {\r\n                                var _regex = new RegExp(callback);\r\n                                return _regex.test(check);\r\n                            }\r\n                            catch (err) {\r\n                                if (typeof check === 'string') {\r\n                                    return check.indexOf(callback) > -1;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                },\r\n                /**\r\n                 * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\r\n                 * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\r\n                 *\r\n                 * @param node\r\n                 * @param condition\r\n                 * @param isAnd\r\n                 * @returns {null|boolean}\r\n                 * @private\r\n                 */\r\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\r\n                    if (angular.isArray(condition)) {\r\n                        return for_each_filter(node, condition, isAnd);\r\n                    } else {\r\n                        var _key = condition.field,\r\n                            _callback = condition.callback,\r\n                            _iO, _keysO, _lenO;\r\n\r\n                        if (_key === '_$') {\r\n                            _keysO = Object.keys(node);\r\n                            _lenO = _keysO.length;\r\n                            for (_iO = 0; _iO < _lenO; _iO++) {\r\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } else if (angular.isDefined(node[_key])) {\r\n                            return _fnCheck(_callback, node[_key]);\r\n                        }\r\n                    }\r\n                },\r\n                /**\r\n                 *\r\n                 * @param {object} node\r\n                 * @param {array} conditions Array `conditions`\r\n                 * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\r\n                 * @returns {null|boolean}\r\n                 */\r\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\r\n                    var i, len = conditions.length || 0, passed = false;\r\n                    if (len === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    for (i = 0; i < len; i++) {\r\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                            passed = true;\r\n                            // if condition `or` then return;\r\n                            if (!isAnd) {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n\r\n                            // if condition `and` and result in fnProccess = false then return;\r\n                            if (isAnd) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return passed;\r\n                },\r\n\r\n                // Will call _fnAfter to clear data no need\r\n                /**\r\n                 *\r\n                 * @param {object} options\r\n                 * @param {object} node\r\n                 * @param {boolean} isNodePassed\r\n                 * @param {boolean} isChildPassed\r\n                 * @param {boolean} isParentPassed\r\n                 * @private\r\n                 */\r\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if ((isChildPassed === true && options.showParent === true)\r\n                               || (isParentPassed === true && options.showChild === true)) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n\r\n                /**\r\n                 * `fnBefore` will called when `for_all_descendants` of `node` checking.\r\n                 * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\r\n                 *\r\n                 * @param {object} options\r\n                 * @param {object} node\r\n                 * @returns {null|boolean}\r\n                 * @private\r\n                 */\r\n                _fnBefore = function _fnBefore(options, node) {\r\n                    if (options.filter.length === 0) {\r\n                        return true;\r\n                    } else {\r\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * `_fnConvert` to convert `filter` `object` to `array` invaild.\r\n                 *\r\n                 * @param {object|array} filters\r\n                 * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\r\n                 * @private\r\n                 */\r\n                _fnConvert = function _fnConvert(filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n\r\n                        if (_lenF > 0) {\r\n                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                    continue;\r\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                    _state = filters[_keysF[_iF]];\r\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\r\n                                } else {\r\n                                    _state = {\r\n                                        field:    _keysF[_iF],\r\n                                        callback: filters[_keysF[_iF]]\r\n                                    };\r\n                                }\r\n                                _filter.push(_state);\r\n                            }\r\n                        }\r\n                        _state = null;\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * `_fnMain` function is constructor of service `$TreeDnDFilter`.\r\n                 * @constructor\r\n                 * @param {object|array} treeData\r\n                 * @param {object|array} filters\r\n                 * @param {object} options\r\n                 * @returns {array} Return `treeData` or `treeData` with `filter`\r\n                 * @private\r\n                 */\r\n                _fnMain = function _fnMain(treeData, filters, options) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(filters) || angular.isObject(filters))\r\n                        || filters.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _filter;\r\n\r\n                    _filter = _fnConvert(filters);\r\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                        || _filter.length === 0) {\r\n                        return treeData;\r\n                    }\r\n                    options.filter = _filter;\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            options,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnBefore, _fnAfter\r\n                        );\r\n                    }\r\n\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _iF, _lenF, _keysF;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    treeData = _fnOrder(treeData, orderBy);\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            var _offset,\r\n                _fnPlaceHolder = function (e, $params) {\r\n                    if ($params.placeElm) {\r\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                        ) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                _fnDragStart = function (e, $params) {\r\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                        // disable right click\r\n                        return;\r\n                    }\r\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                        return;\r\n                    }\r\n                    // the element which is clicked.\r\n                    var eventElm = angular.element(e.target),\r\n                        eventScope = eventElm.scope();\r\n                    if (!eventScope || !eventScope.$type) {\r\n                        return;\r\n                    }\r\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                    //     return;\r\n                    // }\r\n\r\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                        return;\r\n                    }\r\n\r\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                        dragScope,\r\n                        _$scope = $params.$scope;\r\n                    if (eventElmTagName === 'input'\r\n                        || eventElmTagName === 'textarea'\r\n                        || eventElmTagName === 'button'\r\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                        return;\r\n                    }\r\n                    // check if it or it's parents has a 'data-nodrag' attribute\r\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                            return;\r\n                        }\r\n                        eventElm = eventElm.parent();\r\n                    }\r\n\r\n                    e.uiTreeDragging = true; // stop event bubbling\r\n                    if (e.originalEvent) {\r\n                        e.originalEvent.uiTreeDragging = true;\r\n                    }\r\n                    e.preventDefault();\r\n\r\n                    dragScope = eventScope.getScopeNode();\r\n\r\n                    $params.firstMoving = true;\r\n\r\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\r\n                        return;\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                        isTable = (tagName === 'tr');\r\n\r\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                    _$scope.setDragging($params.dragInfo);\r\n\r\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                    if (isTable) {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                            .addClass(_$scope.$class.tree)\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass(_$scope.$tree_class);\r\n                    } else {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass('tree-dnd-nodes')\r\n                            .addClass(_$scope.$tree_class);\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                            'z-index': 9995\r\n                        }\r\n                    );\r\n\r\n                    $params.offsetEdge = 0;\r\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                        _scope = dragScope,\r\n                        _element = _scope.$element,\r\n                        _clone = null,\r\n                        _needCollapse = !!_$scope.enabledCollapse,\r\n                        _copied = false,\r\n                        _tbody = null;\r\n\r\n                    if (isTable) {\r\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\r\n\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope = _$scope.getScope(_node);\r\n                                _element = _scope.$element;\r\n\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _$scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _tbody.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n                                }\r\n\r\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        $params.dragElm.append(_tbody);\r\n                    } else {\r\n\r\n                        if (!_needCollapse) {\r\n                            _clone = _element.clone();\r\n                        } else {\r\n                            var _holder = _scope.getElementChilds(),\r\n                                _swaper = angular.element(\"<swaped />\");\r\n\r\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                            _holder.after(angular.element(\"<holder />\"));\r\n                            _swaper.append(_holder);\r\n\r\n                            // Clone without Children & remove tag `<holder>`\r\n                            _clone = _element.clone();\r\n                            _clone.find(\"holder\").remove();\r\n\r\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                            _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                            // Reset & clear all;\r\n                            _swaper.remove();\r\n                            _holder = null;\r\n                        }\r\n\r\n                        $params.dragElm.append(_clone);\r\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                            _element.addClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                        }\r\n                    );\r\n                    // moving item with descendant\r\n                    $params.$document.find('body').append($params.dragElm);\r\n                    if (_$scope.$callbacks.droppable()) {\r\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                        }\r\n\r\n                        $params.placeElm.css('width', _width);\r\n                    }\r\n\r\n                    _$scope.showPlace();\r\n                    _$scope.targeting = true;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                    $params.document_height = Math.max(\r\n                        $params.body.scrollHeight,\r\n                        $params.body.offsetHeight,\r\n                        $params.html.clientHeight,\r\n                        $params.html.scrollHeight,\r\n                        $params.html.offsetHeight\r\n                    );\r\n\r\n                    $params.document_width = Math.max(\r\n                        $params.body.scrollWidth,\r\n                        $params.body.offsetWidth,\r\n                        $params.html.clientWidth,\r\n                        $params.html.scrollWidth,\r\n                        $params.html.offsetWidth\r\n                    );\r\n                },\r\n                _fnDragMove = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (!$params.dragStarted) {\r\n                        if (!$params.dragDelaying) {\r\n                            $params.dragStarted = true;\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\r\n                                }\r\n                            );\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if ($params.dragElm) {\r\n                        e.preventDefault();\r\n                        if ($params.$window.getSelection) {\r\n                            $params.$window.getSelection().removeAllRanges();\r\n                        } else if ($params.$window.document.selection) {\r\n                            $params.$window.document.selection.empty();\r\n                        }\r\n\r\n                        var eventObj = $TreeDnDHelper.eventObj(e),\r\n                            leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                            topElmPos = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                        //dragElm can't leave the screen on the left\r\n                        if (leftElmPos < 0) {\r\n                            leftElmPos = 0;\r\n                        }\r\n\r\n                        //dragElm can't leave the screen on the top\r\n                        if (topElmPos < 0) {\r\n                            topElmPos = 0;\r\n                        }\r\n\r\n                        //dragElm can't leave the screen on the bottom\r\n                        if ((topElmPos + 10) > $params.document_height) {\r\n                            topElmPos = $params.document_height - 10;\r\n                        }\r\n\r\n                        //dragElm can't leave the screen on the right\r\n                        if ((leftElmPos + 10) > $params.document_width) {\r\n                            leftElmPos = $params.document_width - 10;\r\n                        }\r\n\r\n                        $params.dragElm.css(\r\n                            {\r\n                                'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                    $params.offsetEdge + 1,\r\n                                    true,\r\n                                    true\r\n                                )       + 'px',\r\n                                'top':  topElmPos + 'px'\r\n                            }\r\n                        );\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.setPositionStatus(e);\r\n                        }\r\n\r\n                        var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                            bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                        // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                        if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                            window.scrollBy(0, 10);\r\n                        }\r\n                        // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                        if (top_scroll > eventObj.pageY) {\r\n                            window.scrollBy(0, -10);\r\n                        }\r\n\r\n                        $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                        if ($params.firstMoving) {\r\n                            $params.firstMoving = false;\r\n                            return;\r\n                        }\r\n                        // check if add it as a child node first\r\n\r\n                        var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                            targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                            targetElm,\r\n                            targetScope,\r\n                            targetBefore,\r\n                            targetOffset,\r\n                            tagName,\r\n                            isTable,\r\n                            isChanged = true,\r\n                            isVeritcal = true,\r\n                            isEmpty,\r\n                            isSwapped,\r\n                            _scope,\r\n                            _target,\r\n                            _parent,\r\n                            _info = $params.dragInfo,\r\n                            _move = _info.move,\r\n                            _drag = _info.node,\r\n                            _drop = _info.drop,\r\n                            treeScope = _info.target,\r\n                            fnSwapTree,\r\n                            isHolder = _fnPlaceHolder(e, $params);\r\n\r\n                        if (!isHolder) {\r\n                            /* when using elementFromPoint() inside an iframe, you have to call\r\n                             elementFromPoint() twice to make sure IE8 returns the correct value\r\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                            targetElm = angular.element(\r\n                                $params.$window.document.elementFromPoint(\r\n                                    targetX,\r\n                                    targetY\r\n                                )\r\n                            );\r\n\r\n                            targetScope = targetElm.scope();\r\n                            if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\r\n                                // Not allowed Drop Item\r\n                                return;\r\n                            }\r\n\r\n                            fnSwapTree = function () {\r\n                                treeScope = targetScope.getScopeTree();\r\n                                _target = _info.target;\r\n\r\n                                if (_info.target !== treeScope) {\r\n                                    // Replace by place-holder new\r\n                                    _target.hidePlace();\r\n                                    _target.targeting = false;\r\n                                    treeScope.targeting = true;\r\n\r\n                                    _info.target = treeScope;\r\n                                    $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                    _target = null;\r\n                                    isSwapped = true;\r\n                                }\r\n                                return true;\r\n                            };\r\n\r\n                            if (angular.isFunction(targetScope.getScopeNode)) {\r\n                                targetScope = targetScope.getScopeNode();\r\n                                if (!fnSwapTree()) {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                    if (targetScope.tree_nodes) {\r\n                                        if (targetScope.tree_nodes.length === 0) {\r\n                                            if (!fnSwapTree()) {\r\n                                                return;\r\n                                            }\r\n                                            // Empty\r\n                                            isEmpty = true;\r\n                                        }\r\n                                    } else {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                            isVeritcal = false;\r\n                            targetScope = _info.scope;\r\n                        }\r\n\r\n                        if (!targetScope.$element && !targetScope) {\r\n                            return;\r\n                        }\r\n\r\n                        tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                        isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n                        if (isEmpty) {\r\n                            _move.parent = null;\r\n                            _move.pos = 0;\r\n\r\n                            _drop = null;\r\n                        } else {\r\n                            // move vertical\r\n                            if (isVeritcal) {\r\n                                targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                                targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                                if (targetScope.horizontal && !isTable) {\r\n                                    targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                                } else {\r\n                                    if (isTable) {\r\n                                        targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                    } else {\r\n                                        var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                        if (targetScope.getElementChilds()) {\r\n                                            _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                        }\r\n\r\n                                        if (eventObj.pageY > targetOffset.top + _height) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                    }\r\n                                }\r\n\r\n                                if (!angular.isFunction(targetScope.getData)) {\r\n                                    return;\r\n                                }\r\n\r\n                                _target = targetScope.getData();\r\n                                _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                                if (targetBefore) {\r\n                                    var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                    _move.parent = _parent;\r\n                                    _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                    _drop = _prev;\r\n                                } else {\r\n                                    if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                        _move.parent = _target;\r\n                                        _move.pos = 0;\r\n\r\n                                        _drop = null;\r\n                                    } else {\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                // move horizontal\r\n                                if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                    $params.pos.distAxX = 0;\r\n                                    // increase horizontal level if previous sibling exists and is not collapsed\r\n                                    if ($params.pos.distX > 0) {\r\n                                        _parent = _drop;\r\n                                        if (!_parent) {\r\n                                            if (_move.pos - 1 >= 0) {\r\n                                                _parent = _move.parent.__children__[_move.pos - 1];\r\n                                            } else {\r\n                                                return;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                            _parent = treeScope.getPrevSibling(_parent);\r\n                                        }\r\n\r\n                                        if (_parent && _parent.__visible__) {\r\n                                            var _len = _parent.__children__.length;\r\n\r\n                                            _move.parent = _parent;\r\n                                            _move.pos = _len;\r\n\r\n                                            if (_len > 0) {\r\n                                                _drop = _parent.__children__[_len - 1];\r\n                                            } else {\r\n                                                _drop = null;\r\n                                            }\r\n                                        } else {\r\n                                            // Not changed\r\n                                            return;\r\n                                        }\r\n                                    } else if ($params.pos.distX < 0) {\r\n                                        _target = _move.parent;\r\n                                        if (_target &&\r\n                                            (_target.__children__.length === 0 ||\r\n                                             _target.__children__.length - 1 < _move.pos ||\r\n                                             (_info.drag === _info.target &&\r\n                                              _target.__index_real__ === _drag.__parent_real__ &&\r\n                                              _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\r\n                                        ) {\r\n                                            _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                            _move.parent = _parent;\r\n                                            _move.pos = _target.__index__ + 1;\r\n\r\n                                            _drop = _target;\r\n                                        } else {\r\n                                            // Not changed\r\n                                            return;\r\n                                        }\r\n                                    } else {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    // limited\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (_info.drag === _info.target &&\r\n                            _move.parent &&\r\n                            _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                            _drag.__index__ === _move.pos\r\n                        ) {\r\n                            isChanged = false;\r\n                        }\r\n\r\n                        if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                            _info.move = _move;\r\n                            _info.drop = _drop;\r\n                            _info.changed = isChanged;\r\n                            _info.scope = targetScope;\r\n\r\n                            if (isTable) {\r\n                                $TreeDnDHelper.replaceIndent(\r\n                                    treeScope,\r\n                                    $params.placeElm,\r\n                                    angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                                );\r\n\r\n                                if (_drop) {\r\n                                    _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                    if (_drop.__index__ < _parent.length - 1) {\r\n                                        // Find fast\r\n                                        _drop = _parent[_drop.__index__ + 1];\r\n                                        _scope = _info.target.getScope(_drop);\r\n                                        _scope.$element[0].parentNode.insertBefore(\r\n                                            $params.placeElm[0],\r\n                                            _scope.$element[0]\r\n                                        );\r\n                                    } else {\r\n                                        _target = _info.target.getLastDescendant(_drop);\r\n                                        _scope = _info.target.getScope(_target);\r\n                                        _scope.$element.after($params.placeElm);\r\n                                    }\r\n                                } else {\r\n                                    _scope = _info.target.getScope(_move.parent);\r\n                                    if (_scope) {\r\n                                        if (_move.parent) {\r\n                                            _scope.$element.after($params.placeElm);\r\n\r\n                                        } else {\r\n                                            _scope.getElementChilds().prepend($params.placeElm);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_drop || _move.parent);\r\n\r\n                                if (_drop) {\r\n                                    _scope.$element.after($params.placeElm);\r\n                                } else {\r\n                                    _scope.getElementChilds().prepend($params.placeElm);\r\n                                }\r\n                            }\r\n\r\n                            treeScope.showPlace();\r\n\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragMove(_info);\r\n                                }\r\n                            );\r\n                        }\r\n\r\n                    }\r\n                },\r\n                _fnDragEnd = function (e, $params) {\r\n                    e.preventDefault();\r\n                    if ($params.dragElm) {\r\n                        var _passed = false,\r\n                            _$scope = $params.$scope,\r\n                            _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _isTable = (tagName === 'tr'),\r\n                            _element = _scope.$element;\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                            }\r\n                        );\r\n\r\n                        // rollback all\r\n                        if (_isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n\r\n                        $params.dragElm.remove();\r\n                        $params.dragElm = null;\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        var _status = false;\r\n                        if (_$scope.$$apply) {\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _status = _$scope.$callbacks.dropped(\r\n                                        $params.dragInfo,\r\n                                        _passed,\r\n                                        _$scope.enabledMove\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            _fnBindDrag($params);\r\n                        }\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                            }\r\n                        );\r\n\r\n                        $params.dragInfo.target.hidePlace();\r\n                        $params.dragInfo.target.targeting = false;\r\n\r\n                        $params.dragInfo = null;\r\n                        _$scope.$$apply = false;\r\n                        _$scope.setDragging(null);\r\n                    }\r\n\r\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n                },\r\n                _fnDragStartEvent = function (e, $params) {\r\n                    if ($params.$scope.$callbacks.draggable()) {\r\n                        _fnDragStart(e, $params);\r\n                    }\r\n                },\r\n                _fnBindDrag = function ($params) {\r\n                    $params.element.bind(\r\n                        'touchstart mousedown', function (e) {\r\n                            $params.dragDelaying = true;\r\n                            $params.dragStarted = false;\r\n                            _fnDragStartEvent(e, $params);\r\n                            $params.dragTimer = $timeout(\r\n                                function () {\r\n                                    $params.dragDelaying = false;\r\n                                }, $params.$scope.dragDelay\r\n                            );\r\n                        }\r\n                    );\r\n                    $params.element.bind(\r\n                        'touchend touchcancel mouseup', function () {\r\n                            $timeout.cancel($params.dragTimer);\r\n                        }\r\n                    );\r\n                },\r\n                _fnKeydownHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (e.keyCode === 27) {\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        _$scope.$$apply = false;\r\n                        _fnDragEnd(e, $params);\r\n                    } else {\r\n                        if (_$scope.enabledHotkey && e.shiftKey) {\r\n                            _$scope.enableMove(true);\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.refreshStatus();\r\n                            }\r\n\r\n                            if (!$params.dragInfo) {\r\n                                return;\r\n                            }\r\n\r\n                            var _scope = _$scope.getScope($params.dragInfo.node),\r\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                _element = _scope.$element;\r\n\r\n                            if (tagName === 'tr') {\r\n                                _$scope.for_all_descendants(\r\n                                    $params.dragInfo.node, function (_node) {\r\n                                        _scope = _$scope.getScope(_node);\r\n                                        _element = _scope.$element;\r\n\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _fnKeyupHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                        _$scope.enableMove(false);\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _element = _scope.$element;\r\n\r\n                        if (tagName === 'tr') {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                _$init = function (scope, element, $window, $document) {\r\n                    var $params = {\r\n                            hasTouch:        ('ontouchstart' in window),\r\n                            firstMoving:     null,\r\n                            dragInfo:        null,\r\n                            pos:             null,\r\n                            placeElm:        null,\r\n                            dragElm:         null,\r\n                            dragDelaying:    true,\r\n                            dragStarted:     false,\r\n                            dragTimer:       null,\r\n                            body:            document.body,\r\n                            html:            document.documentElement,\r\n                            document_height: null,\r\n                            document_width:  null,\r\n                            offsetEdge:      null,\r\n                            $scope:          scope,\r\n                            $window:         $window,\r\n                            $document:       $document,\r\n                            element:         element,\r\n                            bindDrag:        function () {\r\n                                _fnBindDrag($params);\r\n                            },\r\n                            dragEnd:         function (e) {\r\n                                _fnDragEnd(e, $params);\r\n                            },\r\n                            dragMoveEvent:   function (e) {\r\n                                _fnDragMove(e, $params)\r\n                            },\r\n                            dragEndEvent:    function (e) {\r\n                                scope.$$apply = true;\r\n                                _fnDragEnd(e, $params);\r\n                            },\r\n                            dragCancelEvent: function (e) {\r\n                                _fnDragEnd(e, $params);\r\n                            }\r\n                        },\r\n                        keydownHandler = function (e) {\r\n                            return _fnKeydownHandler(e, $params);\r\n                        },\r\n                        keyupHandler = function (e) {\r\n                            return _fnKeyupHandler(e, $params);\r\n                        };\r\n\r\n                    scope.dragEnd = function (e) {\r\n                        $params.dragEnd(e);\r\n                    };\r\n\r\n                    $params.bindDrag();\r\n\r\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                    //unbind handler that retains scope\r\n                    scope.$on(\r\n                        '$destroy', function () {\r\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                            if (scope.statusElm) {\r\n                                scope.statusElm.remove();\r\n                            }\r\n\r\n                            if (scope.placeElm) {\r\n                                scope.placeElm.remove();\r\n                            }\r\n                        }\r\n                    );\r\n                };\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n).factory(\r\n    '$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len,\r\n            fnSetCollapse = function fnSetCollapse(node) {\r\n                node.__expanded__ = false;\r\n            },\r\n            fnSetExpand = function fnSetExpand(node) {\r\n                node.__expanded__ = true;\r\n            },\r\n\r\n            _$init = function _$init(scope) {\r\n                var n, tree = {\r\n                    selected_node:                     null,\r\n                    for_all_descendants:               scope.for_all_descendants,\r\n                    select_node:                       function (node) {\r\n                        if (!node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            tree.selected_node = null;\r\n                            return null;\r\n                        }\r\n\r\n                        if (node !== tree.selected_node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            node.__selected__ = true;\r\n                            tree.selected_node = node;\r\n                            tree.expand_all_parents(node);\r\n                            if (angular.isFunction(tree.on_select)) {\r\n                                tree.on_select(node);\r\n                            }\r\n                        }\r\n                        return node;\r\n                    },\r\n                    deselect_node:                     function () {\r\n                        _target = null;\r\n                        if (tree.selected_node) {\r\n                            delete(tree.selected_node.__selected__);\r\n                            _target = tree.selected_node;\r\n                            tree.selected_node = null;\r\n                        }\r\n                        return _target;\r\n                    },\r\n                    get_parent:                        function (node) {\r\n                        if (node && node.__parent_real__ !== null) {\r\n                            return scope.tree_nodes[node.__parent_real__];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    for_all_ancestors:                 function (child, fn) {\r\n                        _parent = tree.get_parent(child);\r\n                        if (_parent) {\r\n                            if (fn(_parent)) {\r\n                                return false;\r\n                            }\r\n\r\n                            return tree.for_all_ancestors(_parent, fn);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    expand_all_parents:                function (child) {\r\n                        return tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        );\r\n                    },\r\n                    reload_data:                       function () {\r\n                        return scope.reload_data();\r\n                    },\r\n                    add_node:                          function (parent, new_node, index) {\r\n                        if (typeof index !== 'number') {\r\n                            if (parent) {\r\n                                parent.__children__.push(new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.push(new_node);\r\n                            }\r\n                        } else {\r\n                            if (parent) {\r\n                                parent.__children__.splice(index, 0, new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.splice(index, 0, new_node);\r\n                            }\r\n                        }\r\n                        return new_node;\r\n                    },\r\n                    add_node_root:                     function (new_node) {\r\n                        tree.add_node(null, new_node);\r\n                        return new_node;\r\n                    },\r\n                    expand_all:                        function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetExpand\r\n                            );\r\n                        }\r\n                    },\r\n                    collapse_all:                      function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetCollapse\r\n                            );\r\n                        }\r\n                    },\r\n                    remove_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            if (node.__parent_real__) {\r\n                                _parent = tree.get_parent(node).__children__;\r\n                            } else {\r\n                                _parent = scope.treeData;\r\n                            }\r\n\r\n                            _parent.splice(node.__index__, 1);\r\n\r\n                            if (tree.selected_node === node) {\r\n                                tree.selected_node = null;\r\n                            }\r\n                        }\r\n                    },\r\n                    expand_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = true;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    collapse_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = false;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    get_selected_node:                 function () {\r\n                        return tree.selected_node;\r\n                    },\r\n                    get_first_node:                    function () {\r\n                        len = scope.treeData.length;\r\n                        if (len > 0) {\r\n                            return scope.treeData[0];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_children:                      function (node) {\r\n                        return node.__children__;\r\n                    },\r\n                    get_siblings:                      function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                _target = _parent.__children__;\r\n                            } else {\r\n                                _target = scope.treeData;\r\n                            }\r\n                            return _target;\r\n                        }\r\n                    },\r\n                    get_next_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = tree.get_siblings(node);\r\n                            n = _target.length;\r\n                            if (node.__index__ < n) {\r\n                                return _target[node.__index__ + 1];\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_siblings(node);\r\n                        if (node.__index__ > 0) {\r\n                            return _target[node.__index__ - 1];\r\n                        }\r\n                    },\r\n                    get_first_child:                   function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = node.__children__;\r\n                            if (_target && _target.length > 0) {\r\n                                return node.__children__[0];\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_closest_ancestor_next_sibling: function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return tree.get_closest_ancestor_next_sibling(_parent);\r\n                    },\r\n                    get_next_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_first_child(node);\r\n                            if (_target) {\r\n                                return _target;\r\n                            } else {\r\n                                return tree.get_closest_ancestor_next_sibling(node);\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.get_last_descendant(_target);\r\n                            }\r\n\r\n                            _parent = tree.get_parent(node);\r\n                            return _parent;\r\n                        }\r\n                    },\r\n                    get_last_descendant:               scope.getLastDescendant,\r\n                    select_parent_node:                function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                return tree.select_node(_parent);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_first_node:                 function () {\r\n                        return tree.select_node(tree.get_first_node());\r\n                    },\r\n                    select_next_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_next_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                angular.extend(scope.tree, tree);\r\n                return scope.tree;\r\n            };\r\n\r\n        return _$init;\r\n    }\r\n).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                if (angular.isFunction(element.empty)) {\r\n                                    element.empty()\r\n                                } else {\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                element.replaceWith($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', [\r\n        '$parse', '$http', '$templateCache', '$compile', function ($parse, $http, $templateCache, $compile) {\r\n            return {\r\n                restrict:   'A',\r\n                controller: function ($scope, $element, $attrs) {\r\n                    $scope.$node_class = '';\r\n\r\n                    if ($scope.$class.node) {\r\n                        $element.addClass($scope.$class.node);\r\n                        $scope.$node_class = $scope.$class.node;\r\n                    }\r\n\r\n                    var _enabledDragDrop = (typeof $scope.dragEnabled === 'boolean' || typeof $scope.dropEnabled === 'boolean');\r\n\r\n                    var keyNode = $attrs.treeDndNode;\r\n\r\n                    if (_enabledDragDrop) {\r\n                        $scope.setScope($scope, $scope[keyNode]);\r\n                    }\r\n\r\n                    $scope.getElementChilds = function () {\r\n                        return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                    };\r\n\r\n                    if (_enabledDragDrop) {\r\n\r\n                        $scope.$element = $element;\r\n                        $scope.$type = 'TreeDnDNode';\r\n\r\n                        $scope.getData = function () {\r\n                            return $scope[keyNode];\r\n                        };\r\n                    }\r\n\r\n                    $scope.getScopeNode = function () {\r\n                        return $scope;\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodes', ['$parse',function ($parse) {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$nodes_class = '';\r\n                scope.$type = 'TreeDnDNodes';\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }]\r\n).directive(\r\n    'treeDnd', [\r\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\r\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\r\n            return {\r\n                restrict:   'E',\r\n                scope:      true,\r\n                replace:    true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.$tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n\r\n\r\n                        $scope.$type = 'TreeDnD';\r\n                        // $scope.enabledFilter = null;\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.$class = {};\r\n\r\n                        $scope.treeData = [];\r\n                        $scope.tree_nodes = [];\r\n\r\n\r\n                        $scope.$class = angular.copy($TreeDnDClass);\r\n                        angular.extend(\r\n                            $scope.$class.icon, {\r\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                            }\r\n                        );\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        $scope.getLastDescendant = function (node) {\r\n                            var last_child, n;\r\n                            if (!node) {\r\n                                node = $scope.tree ? $scope.tree.selected_node : false;\r\n                            }\r\n                            if (node === false) {\r\n                                return false;\r\n                            }\r\n                            n = node.__children__.length;\r\n                            if (n === 0) {\r\n                                return node;\r\n                            } else {\r\n                                last_child = node.__children__[n - 1];\r\n                                return $scope.getLastDescendant(last_child);\r\n                            }\r\n                        };\r\n\r\n                        $scope.getElementChilds = function () {\r\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                        };\r\n\r\n                        $scope.onClick = function (node) {\r\n                            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                                // We want to detach from Angular's digest cycle so we can\r\n                                // independently measure the time for one cycle.\r\n                                setTimeout(\r\n                                    function () {\r\n                                        $scope.tree.on_click(node);\r\n                                    }, 0\r\n                                );\r\n                            }\r\n                        };\r\n\r\n                        $scope.onSelect = function (node) {\r\n                            if (angular.isDefined($scope.tree)) {\r\n                                if (node !== $scope.tree.selected_node) {\r\n                                    $scope.tree.select_node(node);\r\n                                }\r\n\r\n                                if (angular.isFunction($scope.tree.on_select)) {\r\n                                    setTimeout(\r\n                                        function () {\r\n                                            $scope.tree.on_select(node);\r\n                                        }, 0\r\n                                    );\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        var passedExpand, _clone;\r\n                        $scope.toggleExpand = function (node, fnCallback) {\r\n                            passedExpand = true;\r\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                                passedExpand = false;\r\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                                passedExpand = false;\r\n                            }\r\n\r\n                            if (passedExpand) {\r\n                                if (node.__children__.length > 0) {\r\n                                    node.__expanded__ = !node.__expanded__;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.$callbacks = {\r\n                            for_all_descendants: $scope.for_all_descendants,\r\n                            expand:              function (node) {\r\n                                return true;\r\n                            },\r\n                            accept:              function (dragInfo, moveTo, isChanged) {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:           function () {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            draggable:           function () {\r\n                                return $scope.dragEnabled === true;\r\n                            },\r\n                            beforeDrop:          function (event) {\r\n                                return true;\r\n                            },\r\n                            changeKey:           function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:               function (node, _this) {\r\n                                _clone = angular.copy(node);\r\n                                this.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:              function (node, parent, _this) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:                 function (node, pos, parent, _this) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n                            $scope.placeElm = null;\r\n                            //                            $scope.dragBorder = 30;\r\n                            $scope.dragEnabled = null;\r\n                            $scope.dropEnabled = null;\r\n                            $scope.horizontal = null;\r\n\r\n                            if ($attrs.enableDrag) {\r\n\r\n                                $scope.dragDelay = 0;\r\n                                $scope.enabledMove = true;\r\n                                $scope.statusMove = true;\r\n                                $scope.enabledHotkey = false;\r\n                                $scope.enabledCollapse = null;\r\n                                $scope.statusElm = null;\r\n                                $scope.dragging = null;\r\n\r\n                                angular.extend(\r\n                                    $scope.$callbacks, {\r\n                                        beforeDrag: function (scopeDrag) {\r\n                                            return true;\r\n                                        },\r\n                                        dragStop:   function (event, skiped) {},\r\n                                        dropped:    function (info, pass, isMove) {\r\n                                            if (!info) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            if (!info.changed && isMove) {\r\n                                                return false;\r\n                                            }\r\n                                            var _node = info.node,\r\n                                                _nodeAdd = null,\r\n                                                _move = info.move,\r\n                                                _parent = null,\r\n                                                _parentRemove = (info.parent || info.drag.treeData),\r\n                                                _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                                if (isMove) {\r\n                                                    _parent = _parentRemove;\r\n                                                    if (angular.isDefined(_parent.__children__)) {\r\n                                                        _parent = _parent.__children__;\r\n                                                    }\r\n\r\n                                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                                        _node,\r\n                                                        _parent,\r\n                                                        info.drag.$callbacks\r\n                                                    );\r\n                                                } else {\r\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                                }\r\n\r\n                                                // if node dragging change index in sample node parent\r\n                                                // and index node decrement\r\n                                                if (isMove &&\r\n                                                    info.drag === info.target &&\r\n                                                    _parentRemove === _parentAdd &&\r\n                                                    _move.pos >= info.node.__index__) {\r\n                                                    _move.pos--;\r\n                                                }\r\n\r\n                                                _parent = _parentAdd;\r\n                                                if (_parent.__children__) {\r\n                                                    _parent = _parent.__children__;\r\n                                                }\r\n\r\n                                                info.target.$callbacks.add(\r\n                                                    _nodeAdd,\r\n                                                    _move.pos,\r\n                                                    _parent,\r\n                                                    info.drag.$callbacks\r\n                                                );\r\n\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        },\r\n                                        dragStart:  function (event) {},\r\n                                        dragMove:   function (event) {}\r\n                                    }\r\n                                );\r\n\r\n                                $scope.setDragging = function (dragInfo) {\r\n                                    $scope.dragging = dragInfo;\r\n                                };\r\n\r\n                                $scope.enableMove = function (val) {\r\n                                    if (typeof val === \"boolean\") {\r\n                                        $scope.enabledMove = val;\r\n                                    } else {\r\n                                        $scope.enabledMove = true;\r\n                                    }\r\n                                };\r\n\r\n                                if ($attrs.enableStatus) {\r\n                                    $scope.enabledStatus = false;\r\n\r\n                                    $scope.hideStatus = function () {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.refreshStatus = function () {\r\n                                        if (!$scope.dragging) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        if ($scope.enabledStatus) {\r\n                                            var statusElmOld = $scope.statusElm;\r\n                                            if ($scope.enabledMove) {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                            } else {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                            }\r\n\r\n                                            if (statusElmOld !== $scope.statusElm) {\r\n                                                if (statusElmOld) {\r\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                                    statusElmOld.remove();\r\n                                                }\r\n                                                $document.find('body').append($scope.statusElm);\r\n\r\n                                            }\r\n\r\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.setPositionStatus = function (e) {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.css(\r\n                                                {\r\n                                                    'left':    e.pageX + 10 + 'px',\r\n                                                    'top':     e.pageY + 15 + 'px',\r\n                                                    'z-index': 9999\r\n                                                }\r\n                                            );\r\n                                            $scope.statusElm.addClass($scope.$class.status);\r\n                                        }\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            $scope.targeting = false;\r\n\r\n                            $scope.getPrevSibling = function (node) {\r\n                                if (node && node.__index__ > 0) {\r\n                                    var _parent, _index = node.__index__ - 1;\r\n\r\n                                    if (angular.isDefined(node.__parent_real__)) {\r\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                        return _parent.__children__[_index];\r\n                                    }\r\n                                    return $scope.treeData[_index];\r\n\r\n                                }\r\n                                return null;\r\n                            };\r\n\r\n                            $scope.getNode = function (index) {\r\n                                if (angular.isUndefinedOrNull(index)) {\r\n                                    return null;\r\n                                }\r\n                                return $scope.tree_nodes[index];\r\n                            };\r\n\r\n                            $scope.setScope = function (scope, node) {\r\n                                var _hash = $scope.getHash(node);\r\n                                if ($scope.$globals[_hash] !== scope) {\r\n                                    $scope.$globals[_hash] = scope;\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScope = function (node) {\r\n                                if (node) {\r\n                                    return $scope.$globals[$scope.getHash(node)];\r\n                                }\r\n                                return $scope;\r\n\r\n                            };\r\n\r\n                            $scope.initPlace = function (element, dragElm) {\r\n\r\n                                var tagName = null,\r\n                                    isTable = false;\r\n\r\n                                if (element) {\r\n                                    tagName = element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tr' || tagName === 'td');\r\n                                } else {\r\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\r\n                                }\r\n\r\n                                if (!$scope.placeElm) {\r\n\r\n                                    if (isTable) {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                        var _len_down = $scope.colDefinitions.length;\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.$class.empty)\r\n                                                .addClass('indented')\r\n                                                .addClass($scope.$class.place)\r\n                                        );\r\n                                        while (_len_down-- > 0) {\r\n                                            $scope.placeElm.append(\r\n                                                angular.element($window.document.createElement('td'))\r\n                                                    .addClass($scope.$class.empty)\r\n                                                    .addClass($scope.$class.place)\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                            .addClass($scope.$class.empty)\r\n                                            .addClass($scope.$class.place);\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (dragElm) {\r\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                                }\r\n\r\n                                if (element) {\r\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                                } else {\r\n                                    $scope.getElementChilds().append($scope.placeElm);\r\n                                }\r\n\r\n                                return $scope.placeElm;\r\n                            };\r\n\r\n                            $scope.hidePlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.showPlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScopeTree = function () {\r\n                                return $scope;\r\n                            };\r\n\r\n                        }\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                        var getExpandOn = function () {\r\n                                if ($scope.treeData && $scope.treeData.length) {\r\n                                    var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                        _len,\r\n                                        i;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            $scope.expandingProperty = _keys[i];\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Auto get first\r\n                                    if (angular.isUndefinedOrNull($scope.expandingProperty)) {\r\n                                        $scope.expandingProperty = _keys[0];\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            getColDefs = function () {\r\n                                // Auto get Defs except attribute __level__ ....\r\n                                if ($scope.treeData.length) {\r\n                                    var _col_defs = [], _firstNode = $scope.treeData[0],\r\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + $scope.expandingProperty + \"$)\"),\r\n                                        _keys = Object.keys(_firstNode),\r\n                                        i, _len;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            _col_defs.push(\r\n                                                {\r\n                                                    field: _keys[i]\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    $scope.colDefinitions = _col_defs;\r\n                                }\r\n                            },\r\n                            _fnInitFilter,\r\n                            _fnInitOrderBy,\r\n                            _fnGetControl,\r\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                                if (!angular.isArray(node.__children__)) {\r\n                                    node.__children__ = [];\r\n                                }\r\n\r\n                                node.__parent_real__ = parent_real;\r\n                                node.__parent__ = parent;\r\n                                _len = node.__children__.length;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                    node.__expanded__ = level < $scope.expandLevel;\r\n                                }\r\n\r\n                                if (_len === 0) {\r\n                                    _icon = -1;\r\n                                } else {\r\n                                    if (node.__expanded__) {\r\n                                        _icon = 1;\r\n                                    } else {\r\n                                        _icon = 0;\r\n                                    }\r\n                                }\r\n                                // Insert item vertically\r\n                                _index_real = root.length;\r\n                                node.__index__ = index;\r\n                                node.__index_real__ = _index_real;\r\n                                node.__level__ = level;\r\n                                node.__icon__ = _icon;\r\n                                node.__icon_class__ = $scope.$class.icon[_icon];\r\n                                node.__visible__ = !!visible;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                    node.__uid__ = \"\" + Math.random();\r\n                                }\r\n\r\n                                root.push(node);\r\n\r\n                                // Check node children\r\n                                _dept = 1;\r\n                                if (_len > 0) {\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _dept += do_f(\r\n                                            root,\r\n                                            node.__children__[_i],\r\n                                            ($scope.primary_key === '__uid__') ? node.__uid__ : node[$scope.primary_key],\r\n                                            _index_real,\r\n                                            level + 1,\r\n                                            visible && node.__expanded__,\r\n                                            _i\r\n                                        );\r\n                                    }\r\n                                }\r\n\r\n                                _hashKey = $scope.getHash(node);\r\n\r\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                    node.__hashKey__ = _hashKey;\r\n                                    // delete($scope.$globals[_hashKey]);\r\n                                }\r\n\r\n                                node.__dept__ = _dept;\r\n\r\n                                return _dept;\r\n                            },\r\n                            reload_data = function (oData) {\r\n                                var _data,\r\n                                    _len,\r\n                                    _tree_nodes = [];\r\n                                if (angular.isDefined(oData)) {\r\n                                    if (!angular.isArray(oData) || oData.length === 0) {\r\n                                        return [];\r\n                                    } else {\r\n                                        _data = oData;\r\n                                    }\r\n                                } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\r\n                                    return [];\r\n                                } else {\r\n                                    _data = $scope.treeData;\r\n                                }\r\n\r\n                                if (!$attrs.expandOn) {\r\n                                    getExpandOn();\r\n                                }\r\n\r\n                                if (!$attrs.columnDefs) {\r\n                                    getColDefs();\r\n                                }\r\n\r\n                                if (angular.isDefined($scope.orderBy)) {\r\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\r\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitOrderBy)) {\r\n                                        _data = _fnInitOrderBy(_data, $scope.orderBy);\r\n                                    }\r\n                                }\r\n\r\n                                if (angular.isDefined($scope.filter)) {\r\n                                    if (!angular.isFunction(_fnInitFilter)) {\r\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitFilter)) {\r\n                                        _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\r\n                                    }\r\n                                }\r\n\r\n                                _len = _data.length;\r\n                                if (_len > 0) {\r\n                                    var _i,\r\n                                        _offset, _max, _min, _keys,\r\n                                        _deptTotal = 0;\r\n\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                    }\r\n\r\n                                    // clear Element Empty\r\n                                    _keys = Object.keys($scope.$globals);\r\n                                    _len = $scope.$globals.length;\r\n                                    _offset = _len - _deptTotal;\r\n\r\n                                    if (_offset !== 0) {\r\n                                        _max = _len - _offset;\r\n                                        _min = _max - Math.abs(_offset);\r\n                                        for (_i = _min; _i < _max; _i++) {\r\n                                            delete($scope.$globals[_keys[_i]]);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // clear memory\r\n                                if (angular.isDefined($scope.tree_nodes)) {\r\n                                    delete($scope.tree_nodes);\r\n                                }\r\n\r\n                                $scope.tree_nodes = _tree_nodes;\r\n                                return _tree_nodes;\r\n                            },\r\n                            _defaultFilterOption = {\r\n                                showParent: true,\r\n                                showChild:  false,\r\n                                beginAnd:   true\r\n                            },\r\n                            tree,\r\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\r\n                                if (angular.isUndefinedOrNull(existAttr)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                                    return true;\r\n                                }\r\n\r\n                                if (angular.isArray(existAttr)) {\r\n                                    return for_each_attrs(attrs, existAttr, isAnd);\r\n                                }\r\n                            },\r\n                            for_each_attrs = function (attrs, exist, isAnd) {\r\n                                var i, len = exist.length, passed = false;\r\n\r\n                                if (len === 0) {\r\n                                    return null;\r\n                                }\r\n                                for (i = 0; i < len; i++) {\r\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                                        passed = true;\r\n                                        if (!isAnd) {\r\n                                            return true;\r\n                                        }\r\n                                    } else {\r\n                                        if (isAnd) {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                return passed;\r\n                            },\r\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\r\n                                nameScope = nameScope || nameAttr;\r\n                                if (typeof type === 'string' || angular.isArray(type)) {\r\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                                        return;//jmp\r\n                                    }\r\n                                    if (typeof $attrs[nameAttr] === 'string') {\r\n                                        $scope.$watch(\r\n                                            $attrs[nameAttr], function (val) {\r\n                                                if ((typeof type === 'string' && typeof val === type) ||\r\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\r\n                                                ) {\r\n                                                    $scope[nameScope] = val;\r\n                                                } else {\r\n                                                    if (angular.isFunction(valDefault)) {\r\n                                                        $scope[nameScope] = valDefault(val);\r\n                                                    } else {\r\n                                                        $scope[nameScope] = valDefault;\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (angular.isFunction(fnAfter)) {\r\n                                                    fnAfter($scope[nameScope], $scope);\r\n                                                }\r\n                                            }, true\r\n                                        );\r\n                                    } else {\r\n\r\n                                        if (angular.isFunction(fnNotExist)) {\r\n                                            $scope[nameScope] = fnNotExist();\r\n                                        } else if (!angular.isUndefined(fnNotExist)) {\r\n                                            $scope[nameScope] = fnNotExist;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            _watches = [\r\n                                [\r\n                                    'enableDrag', [\r\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                                    ['number', 'dragDelay', 0, null, 0],\r\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                                    [\r\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                        if (isHotkey) {\r\n                                            $scope.enabledMove = false;\r\n                                        } else {\r\n                                            $scope.enabledMove = $scope.statusMove;\r\n                                        }\r\n                                    }]\r\n                                ]],\r\n                                [\r\n                                    ['enableDrag', 'enableStatus'], [\r\n                                    [\r\n                                        'string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setCopy(_url, $scope);\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'string', 'templateMove', $attrs.templateMove, 'templateMove', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setMove(_url, $scope);\r\n                                            }\r\n                                        }]\r\n                                ]],\r\n                                [\r\n                                    [['enableDrag', 'enableDrop']], [\r\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                                ],\r\n                                [\r\n                                    '*', [\r\n                                    ['boolean', 'horizontal'],\r\n                                    [\r\n                                        'callback', 'treeClass', function (val) {\r\n                                        switch (typeof val) {\r\n                                            case 'string':\r\n                                                $scope.$tree_class = val;\r\n                                                break;\r\n                                            case 'object':\r\n                                                angular.extend($scope.$class, val);\r\n                                                $scope.$tree_class = $scope.$class.tree;\r\n                                                break;\r\n                                            default:\r\n                                                $scope.$tree_class = $attrs.treeClass;\r\n                                                break;\r\n                                        }\r\n                                    }, 'treeClass', function () {\r\n                                        $scope.$tree_class = $scope.$class.tree + ' table';\r\n                                    }, null, function () {\r\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + $attrs.treeClass)) {\r\n                                            $scope.$tree_class = $attrs.treeClass.trim();\r\n                                            return true;\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                                        function (expandOn) {\r\n                                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                                $scope.expandingProperty = $attrs.expandOn;\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\r\n                                        'tree', null, function ($tree) {\r\n\r\n                                        $scope.reload_data = reload_data;\r\n\r\n                                        if (!angular.isFunction(_fnGetControl)) {\r\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                                        }\r\n\r\n                                        if (angular.isFunction(_fnGetControl)) {\r\n                                            tree = angular.extend(\r\n                                                $tree,\r\n                                                _fnGetControl($scope)\r\n                                            );\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                                        function (colDefs) {\r\n                                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                                $scope.colDefinitions = getColDefs();\r\n                                            }\r\n                                        }],\r\n                                    [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\r\n                                    [\r\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                                        var _passed = false;\r\n                                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                                            var _keysF = Object.keys(filters),\r\n                                                _lenF = _keysF.length, _iF;\r\n\r\n                                            if (_lenF > 0) {\r\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\r\n                                                        filters[_keysF[_iF]].length === 0) {\r\n                                                        continue;\r\n                                                    }\r\n                                                    _passed = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        $scope.enabledFilter = _passed;\r\n                                        reload_data();\r\n                                    }],\r\n                                    [\r\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                        _defaultFilterOption, function (option) {\r\n                                        if (typeof option === \"object\") {\r\n                                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                        }\r\n                                    }],\r\n                                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\r\n                                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\r\n                                    ['number', 'indent', 30, null, 30],\r\n                                    ['number', 'indentPlus', 20, null, 20],\r\n                                    [\r\n                                        'null', 'callbacks',\r\n                                        function (optCallbacks) {\r\n                                            angular.forEach(\r\n                                                optCallbacks, function (value, key) {\r\n                                                    if (typeof value === \"function\") {\r\n                                                        if ($scope.$callbacks[key]) {\r\n                                                            $scope.$callbacks[key] = value;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                            return $scope.$callbacks;\r\n                                        },\r\n                                        '$callbacks'\r\n                                    ],\r\n                                    [\r\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                                        reload_data();\r\n                                    }],\r\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                                ]]\r\n                            ],\r\n                            w, lenW = _watches.length,\r\n                            i, len,\r\n                            _curW,\r\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\r\n                        for (w = 0; w < lenW; w++) {\r\n                            // skip if not exist\r\n                            if (!check_exist_attr($attrs, _watches[w][0], true)) {\r\n                                continue;\r\n                            }\r\n                            _curW = _watches[w][1];\r\n                            for (i = 0, len = _curW.length; i < len; i++) {\r\n                                _typeW = _curW[i][0];\r\n                                _nameW = _curW[i][1];\r\n                                _defaultW = _curW[i][2];\r\n                                _scopeW = _curW[i][3];\r\n                                _NotW = _curW[i][4];\r\n                                _AfterW = _curW[i][5];\r\n                                _BeforeW = _curW[i][6];\r\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n                            }\r\n                        }\r\n\r\n                        if ($attrs.treeData) {\r\n                            $scope.$watch(\r\n                                $attrs.treeData, function (val) {\r\n                                    $scope.treeData = val;\r\n                                }, true\r\n                            );\r\n                        }\r\n\r\n                        $scope.$watch(\r\n                            'treeData', function () {\r\n                                reload_data();\r\n                            }, true\r\n                        );\r\n                    }],\r\n                compile:    function compile(tElement) {\r\n\r\n                    var $_Template = '',\r\n                        _element = tElement.html().trim();\r\n                    if (_element.length > 0) {\r\n                        $_Template = _element;\r\n                        tElement.html('');\r\n                    }\r\n\r\n                    return function fnPost(scope, element, attrs) {\r\n\r\n                        if (attrs.enableDrag) {\r\n                            var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                            if (angular.isFunction(_fnInitDrag)) {\r\n                                _fnInitDrag(scope, element, $window, $document);\r\n                            }\r\n                        }\r\n\r\n                        // kick out $digest\r\n                        element.ready(function(){\r\n                            // apply Template\r\n                            scope.$safeApply(\r\n                                function () {\r\n                                    if ($_Template.length > 0) {\r\n                                        element.append($compile($_Template)(scope));\r\n                                    } else {\r\n                                        $http.get(\r\n                                            attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                            {cache: $templateCache}\r\n                                        ).success(\r\n                                            function (data) {\r\n                                                element.append($compile(data.trim())(scope));\r\n                                                scope.$element = angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                                            }\r\n                                        );\r\n                                    }\r\n\r\n                                }\r\n                            );\r\n                        })\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function access_child(data, parentKey) {\r\n                var _tree = [],\r\n                    _i,\r\n                    _len = data ? data.length : 0,\r\n                    _copy, _child;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _copy = angular.copy(data[_i]);\r\n                    if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                        _child = access_child(_copy[parentKey], parentKey);\r\n                        delete(_copy[parentKey]);\r\n                        _copy.__children__ = _child;\r\n                    }\r\n                    _tree.push(_copy);\r\n                }\r\n                return _tree;\r\n            }\r\n        }\r\n\r\n        return _$initConvert;\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n).factory(\r\n    '$TreeDnDPlugin',['$injector', function ($injector) {\r\n        var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n        return _fnget;\r\n    }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes = {},\r\n                temp,\r\n                _$init = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            [\"<table ng-class=\\\"$tree_class\\\">\",\r\n             \"    <thead>\",\r\n             \"  <tr>\",\r\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\r\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\r\n             \"        <\\/th>\",\r\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\r\n             \"         {{col.displayName || col.field}}\",\r\n             \"     </th>\",\r\n             \"    </tr>\",\r\n             \"    </thead>\",\r\n             \" <tbody tree-dnd-nodes>\",\r\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in tree_nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\r\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\r\n             \"        <td tree-dnd-node-handle\",\r\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\r\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\r\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\r\n             \"              <a data-nodrag>\",\r\n             \"                  <i ng-class=\\\"node.__icon_class__\\\" ng-click=\\\"toggleExpand(node)\\\"\",\r\n             \"                     class=\\\"tree-icon\\\"></i>\",\r\n             \"              </a>\",\r\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\r\n             \"       </td>\",\r\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\r\n             \"            compile=\\\"col.cellTemplate\\\">\",\r\n             \"            {{node[col.field]}}\",\r\n             \"       </td>\",\r\n             \"    </tr>\",\r\n             \"    </tbody>\",\r\n             \"</table>\"].join('')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"],"sourceRoot":"/source/"}